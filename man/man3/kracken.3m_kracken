." Text automatically generated by txt2man
.TH "kracken" "3m_kracken" "January 03, 2022" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." set smaller margin and spacing options
.ta T 0.2i
.nr IN 0.2i
." -----------------------------------------------------------------
.SH NAME
\fBkracken\fP(3f) - [ARGUMENTS:M_kracken] crack command line options on Fortran programs, using "\fB-KEYWORD\fP VALUE" syntax
(LICENSE:PD)

.SH SYNOPSIS
subroutine \fBkracken\fP(\fIverb\fP, string[,ierror][style])
.PP
.nf
.fam C
       character(len=*), intent(in) ::  verb
       character(len=*), intent(in) :: string
       integer, intent(out), optional :: ierror
       character(len=*), intent(in),optional :: style

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
This is the main public procedure in the \fBM_kracken\fP(3f) module.
It is used to define the command line options, their default
values, and to crack the command line options using a syntax
that looks very much like an execution of the program.
.SH OPTIONS
.TP
.B VERB
arbitrary command name, usually 'cmd' or the name of the
program calling the routine. This defines the
variable prefix name used by the other functions to
retrieve command option values.
.TP
.B STRING
prototype command to define keywords and defaults.
This string is simply a list of all keywords and their
default values exactly as you would type them on the
command line, with default values explicitly set.
.TP
.B IERROR
If an error occurs such as an unknown keyword the
calling program will be stopped unless the optional
parameter IERROR is present. If present, it is up
to the calling program to decide what to do if
a non-zero value is returned.
.TP
.B STYLE
parsing style. Either 'kracken' or 'args'. The default
is 'kracken'.
.SH EXAMPLE

Sample program:
.PP
.nf
.fam C
      program demo_kracken

      use M_kracken
      ! define command arguments, default values and crack command line
      call kracken('cmd',              &
         &   '-int 20                  &
         &   -real 10e3                &
         &   -file input               &
         &   -dble 4.11223344556677d0  &
         &   -help    .false.          &
         &   -version .false.         '&
         &   )
      ! that's it. You defined your command arguments and their default
      ! values and parsed the user-supplied command line arguments.

      ! Now you can just retrieve the values as strings using
      ! names of the form VERB_SWITCHNAME anywhere in your program.
      ! Note that the special name "VERB_oo"  is for the string
      ! before any switch.
         if(lget('cmd_help'))then ! was -help specified?
            write(*,*)'The help text'
            stop
         endif
         if(lget('cmd_version'))then ! was -version specified?
            write(*,*)'version 1.0 20161030'
            stop
         endif
         ! convert all the remaining options to scalar values
         ! and call a procedure with the values
         call mymain(                  &
         & sget('cmd_file'),           &
         & rget('cmd_real'),           &
         & dget('cmd_dble'),           &
         & iget('cmd_int')             &
         & )
      contains
      subroutine mymain(filename,value1,value2,ivalue3)
      ! this routine is using conventional values and does
      ! not use M_kracken(3fm) module at all
      implicit none
      character(len=*),intent(in) :: filename
      real,intent(in)             :: value1
      doubleprecision,intent(in)  :: value2
      integer,intent(in)          :: ivalue3
         ! just to show the command arguments have
         ! been processed echo the values
         print *, 'filename=',trim(filename)
         print *, 'values=',value1,value2,ivalue3
      end subroutine mymain
      end program demo_kracken

.fam T
.fi
expected output from : "./cmd"
.PP
.nf
.fam C
         filename=input
         values= 10000.0000  4.1122334455667700  20

.fam T
.fi
expected output from : "./cmd \fB-file\fP myfile \fB-int\fP 1234"
.PP
.nf
.fam C
         filename=myfile
         values= 10000.0000  4.1122334455667700  1234

.fam T
.fi
.SH SEE ALSO
.TP
.B \fBM_kracken\fP(3f),
\fBkracken\fP(3f)
.PP
\fBdget\fP(3f), \fBdgets\fP(3f), \fBiget\fP(3f), \fBigets\fP(3f), \fBlget\fP(3f), \fBlgets\fP(3f),
\fBrget\fP(3f), \fBrgets\fP(3f), \fBsget\fP(3f), \fBsgets\fP(3f), \fBretrev\fP(3f)
.PP
\fBparse\fP(3f), \fBdissect\fP(3f), \fBstore\fP(3f), \fBsetprompts\fP(3f), \fBshow\fP(3f)
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
