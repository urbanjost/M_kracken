>>>> MODULE IS                       M_kracken
>>>> DOCUMENT DIRECTORY IS           /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source
>>>> MANPAGES PROCEDURE DIRECTORY IS /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man
>>>> MAN_EXTENSION IS                m_kracken
+ grep -q '^#' M_kracken.FF
+ SUFFIX=f90
+ '[' TRUE = '' ']'
+ prep F90 GITHUB --noenv --comment doxygen --verbose -i M_kracken.FF -o ../M_kracken.f90
+ verbose mode on
+ grep -qi '^$IFDEF  *C *$' M_kracken.FF
+ cd doc
+ set -xv
+ cat
>>>> .man files to MAN DIRECTORY as ROFF and HTML
>>>> MANOUT        => /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man
>>>> MAN_EXTENSION => 
>>>> DOCS          => /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man1
++ ls '*.1.man' '*.1m_kracken.man'
++ uniq
++ sort
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man2
++ ls '*.2.man' '*.2m_kracken.man'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3
++ sort
++ ls ARGUMENTS.3.man dget.3m_kracken.man dgets.3m_kracken.man dissect.3m_kracken.man iget.3m_kracken.man igets.3m_kracken.man kracken.3m_kracken.man lget.3m_kracken.man lgets.3m_kracken.man parse.3m_kracken.man retrev.3m_kracken.man rget.3m_kracken.man rgets.3m_kracken.man setprompts.3m_kracken.man sget.3m_kracken.man sgets.3m_kracken.man show.3m_kracken.man store.3m_kracken.man
++ uniq
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for ARGUMENTS.3.man'
>>>> processing manpage and HTML for ARGUMENTS.3.man
++ basename ARGUMENTS.3.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/ARGUMENTS.3
++ basename ARGUMENTS.3.man .3m_kracken.man
+ SHORTNAME=ARGUMENTS.3.man
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/ARGUMENTS.3 SHORTNAME ARGUMENTS.3.man
+ txt2man -s 3m_kracken -t ARGUMENTS.3.man ARGUMENTS.3.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/ARGUMENTS.3
+ env AUX_FILENAME=ARGUMENTS.3.man man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html c7cd0125-c447-4552-8a63-fe420b1ddeb3
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/ARGUMENTS.3.man.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/ARGUMENTS.3.man.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/ARGUMENTS.3.man.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/ARGUMENTS.3.man.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/ARGUMENTS.3
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for dget.3m_kracken.man'
>>>> processing manpage and HTML for dget.3m_kracken.man
++ basename dget.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dget.3m_kracken
++ basename dget.3m_kracken.man .3m_kracken.man
+ SHORTNAME=dget
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dget.3m_kracken SHORTNAME dget
+ txt2man -s 3m_kracken -t dget dget.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dget.3m_kracken
+ env AUX_FILENAME=dget man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html dd53d95c-e102-41f8-b5db-cdcc07de9221
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dget.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dget.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dget.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dget.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dget.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for dgets.3m_kracken.man'
>>>> processing manpage and HTML for dgets.3m_kracken.man
++ basename dgets.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dgets.3m_kracken
++ basename dgets.3m_kracken.man .3m_kracken.man
+ SHORTNAME=dgets
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dgets.3m_kracken SHORTNAME dgets
+ txt2man -s 3m_kracken -t dgets dgets.3m_kracken.man
+ env AUX_FILENAME=dgets man2html
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dgets.3m_kracken
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html ca46cacd-f6f1-4745-bc11-65f894c2f80f
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dgets.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dgets.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dgets.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dgets.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dgets.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for dissect.3m_kracken.man'
>>>> processing manpage and HTML for dissect.3m_kracken.man
++ basename dissect.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dissect.3m_kracken
++ basename dissect.3m_kracken.man .3m_kracken.man
+ SHORTNAME=dissect
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dissect.3m_kracken SHORTNAME dissect
+ txt2man -s 3m_kracken -t dissect dissect.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dissect.3m_kracken
+ env AUX_FILENAME=dissect man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 068ea7d3-2b33-47e8-99e4-f51abe250bd6
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dissect.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dissect.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dissect.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dissect.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/dissect.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for iget.3m_kracken.man'
>>>> processing manpage and HTML for iget.3m_kracken.man
++ basename iget.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/iget.3m_kracken
++ basename iget.3m_kracken.man .3m_kracken.man
+ SHORTNAME=iget
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/iget.3m_kracken SHORTNAME iget
+ txt2man -s 3m_kracken -t iget iget.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/iget.3m_kracken
+ env AUX_FILENAME=iget man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 22f25059-c6f5-44cc-b688-377b393bd98e
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/iget.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/iget.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/iget.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/iget.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/iget.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for igets.3m_kracken.man'
>>>> processing manpage and HTML for igets.3m_kracken.man
++ basename igets.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/igets.3m_kracken
++ basename igets.3m_kracken.man .3m_kracken.man
+ SHORTNAME=igets
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/igets.3m_kracken SHORTNAME igets
+ env AUX_FILENAME=igets man2html
+ txt2man -s 3m_kracken -t igets igets.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/igets.3m_kracken
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 29429a13-215e-438e-b0ce-793befa01129
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/igets.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/igets.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/igets.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/igets.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/igets.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for kracken.3m_kracken.man'
>>>> processing manpage and HTML for kracken.3m_kracken.man
++ basename kracken.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/kracken.3m_kracken
++ basename kracken.3m_kracken.man .3m_kracken.man
+ SHORTNAME=kracken
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/kracken.3m_kracken SHORTNAME kracken
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/kracken.3m_kracken
+ txt2man -s 3m_kracken -t kracken kracken.3m_kracken.man
+ env AUX_FILENAME=kracken man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html b5eb0bb1-7e60-4fa1-9c94-1d050943b161
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/kracken.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/kracken.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/kracken.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/kracken.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/kracken.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for lget.3m_kracken.man'
>>>> processing manpage and HTML for lget.3m_kracken.man
++ basename lget.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lget.3m_kracken
++ basename lget.3m_kracken.man .3m_kracken.man
+ SHORTNAME=lget
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lget.3m_kracken SHORTNAME lget
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lget.3m_kracken
+ env AUX_FILENAME=lget man2html
+ txt2man -s 3m_kracken -t lget lget.3m_kracken.man
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html b6e3a267-49fb-4aab-81e7-f0654b3be806
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lget.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lget.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lget.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lget.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lget.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for lgets.3m_kracken.man'
>>>> processing manpage and HTML for lgets.3m_kracken.man
++ basename lgets.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lgets.3m_kracken
++ basename lgets.3m_kracken.man .3m_kracken.man
+ SHORTNAME=lgets
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lgets.3m_kracken SHORTNAME lgets
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lgets.3m_kracken
+ txt2man -s 3m_kracken -t lgets lgets.3m_kracken.man
+ env AUX_FILENAME=lgets man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html a3e57864-30cc-42ba-a004-cad6807f8e19
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lgets.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lgets.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lgets.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lgets.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/lgets.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for parse.3m_kracken.man'
>>>> processing manpage and HTML for parse.3m_kracken.man
++ basename parse.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/parse.3m_kracken
++ basename parse.3m_kracken.man .3m_kracken.man
+ SHORTNAME=parse
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/parse.3m_kracken SHORTNAME parse
+ txt2man -s 3m_kracken -t parse parse.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/parse.3m_kracken
+ env AUX_FILENAME=parse man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 65634579-514e-4480-a4b8-76578d7700fe
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/parse.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/parse.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/parse.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/parse.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/parse.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for retrev.3m_kracken.man'
>>>> processing manpage and HTML for retrev.3m_kracken.man
++ basename retrev.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/retrev.3m_kracken
++ basename retrev.3m_kracken.man .3m_kracken.man
+ SHORTNAME=retrev
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/retrev.3m_kracken SHORTNAME retrev
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/retrev.3m_kracken
+ env AUX_FILENAME=retrev man2html
+ txt2man -s 3m_kracken -t retrev retrev.3m_kracken.man
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html af2fffb5-a38d-4644-86be-89df4b5d3ff9
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/retrev.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/retrev.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/retrev.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/retrev.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/retrev.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for rget.3m_kracken.man'
>>>> processing manpage and HTML for rget.3m_kracken.man
++ basename rget.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rget.3m_kracken
++ basename rget.3m_kracken.man .3m_kracken.man
+ SHORTNAME=rget
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rget.3m_kracken SHORTNAME rget
+ txt2man -s 3m_kracken -t rget rget.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rget.3m_kracken
+ env AUX_FILENAME=rget man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html ba9d6b2e-af58-4606-8e76-34de3af4aacf
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rget.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rget.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rget.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rget.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rget.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for rgets.3m_kracken.man'
>>>> processing manpage and HTML for rgets.3m_kracken.man
++ basename rgets.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rgets.3m_kracken
++ basename rgets.3m_kracken.man .3m_kracken.man
+ SHORTNAME=rgets
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rgets.3m_kracken SHORTNAME rgets
+ txt2man -s 3m_kracken -t rgets rgets.3m_kracken.man
+ env AUX_FILENAME=rgets man2html
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rgets.3m_kracken
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 6fedf6cf-3f1c-4a15-a3bc-a840c2be28ec
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rgets.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rgets.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rgets.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rgets.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/rgets.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for setprompts.3m_kracken.man'
>>>> processing manpage and HTML for setprompts.3m_kracken.man
++ basename setprompts.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/setprompts.3m_kracken
++ basename setprompts.3m_kracken.man .3m_kracken.man
+ SHORTNAME=setprompts
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/setprompts.3m_kracken SHORTNAME setprompts
+ txt2man -s 3m_kracken -t setprompts setprompts.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/setprompts.3m_kracken
+ env AUX_FILENAME=setprompts man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 35793349-7a72-4fe6-861f-a4240298ec92
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/setprompts.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/setprompts.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/setprompts.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/setprompts.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/setprompts.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for sget.3m_kracken.man'
>>>> processing manpage and HTML for sget.3m_kracken.man
++ basename sget.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sget.3m_kracken
++ basename sget.3m_kracken.man .3m_kracken.man
+ SHORTNAME=sget
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sget.3m_kracken SHORTNAME sget
+ txt2man -s 3m_kracken -t sget sget.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sget.3m_kracken
+ env AUX_FILENAME=sget man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 5a5aeeca-79d8-4006-8d38-536ef985e77a
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sget.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sget.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sget.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sget.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sget.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for sgets.3m_kracken.man'
>>>> processing manpage and HTML for sgets.3m_kracken.man
++ basename sgets.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sgets.3m_kracken
++ basename sgets.3m_kracken.man .3m_kracken.man
+ SHORTNAME=sgets
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sgets.3m_kracken SHORTNAME sgets
+ txt2man -s 3m_kracken -t sgets sgets.3m_kracken.man
+ env AUX_FILENAME=sgets man2html
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sgets.3m_kracken
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 13e60f72-56a2-4248-a139-258395c50dc8
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sgets.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sgets.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sgets.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sgets.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/sgets.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for show.3m_kracken.man'
>>>> processing manpage and HTML for show.3m_kracken.man
++ basename show.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/show.3m_kracken
++ basename show.3m_kracken.man .3m_kracken.man
+ SHORTNAME=show
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/show.3m_kracken SHORTNAME show
+ txt2man -s 3m_kracken -t show show.3m_kracken.man
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/show.3m_kracken
+ env AUX_FILENAME=show man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html a30c31a8-9e46-4c59-b290-307063fa5057
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/show.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/show.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/show.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/show.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/show.3m_kracken
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for store.3m_kracken.man'
>>>> processing manpage and HTML for store.3m_kracken.man
++ basename store.3m_kracken.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/store.3m_kracken
++ basename store.3m_kracken.man .3m_kracken.man
+ SHORTNAME=store
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/store.3m_kracken SHORTNAME store
+ txt2man -s 3m_kracken -t store store.3m_kracken.man
+ env AUX_FILENAME=store man2html
+ tee /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/store.3m_kracken
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html ff63823e-7645-4130-af75-6ecf3ae58d7c
+ replace index.html https://github.com/urbanjost/M_kracken -- /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/store.3m_kracken.html
CHANGING FILE /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/store.3m_kracken.html  [index.html][https://github.com/urbanjost/M_kracken]
BEFORE: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/store.3m_kracken.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/store.3m_kracken.html:45:<h5><a href="https://github.com/urbanjost/M_kracken">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/store.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man4
++ sort
++ ls '*.4.man' '*.4m_kracken.man'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man5
++ ls '*.5.man' '*.5m_kracken.man'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man6
++ ls '*.6.man' '*.6m_kracken.man'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man7
++ sort
++ ls '*.7.man' '*.7m_kracken.man'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man8
++ ls '*.8.man' '*.8m_kracken.man'
++ sort
++ uniq
+ cat
>>>> .txt files to MAN DIRECTORY
>>>> MANOUT        => /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man
>>>> MAN_EXTENSION => 
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man1
++ ls '*.1.txt' '*.1m_kracken.txt'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man2
++ ls '*.2.txt' '*.2m_kracken.txt'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3
++ sort
++ ls '*.3.txt' '*.3m_kracken.txt'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man4
++ ls '*.4.txt' '*.4m_kracken.txt'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man5
++ ls '*.5.txt' '*.5m_kracken.txt'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man6
++ sort
++ ls '*.6.txt' '*.6m_kracken.txt'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man7
++ ls '*.7.txt' '*.7m_kracken.txt'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man8
++ sort
++ uniq
++ ls '*.8.txt' '*.8m_kracken.txt'
+ echo '>>>> *.htm files to HTML and ROFF'
>>>> *.htm files to HTML and ROFF
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .1m_kracken.htm
+ SHORTNAME=M_kracken.3m_kracken.htm
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.htm.1m_kracken.html
+ txt2man
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man1/M_kracken.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .2m_kracken.htm
+ SHORTNAME=M_kracken.3m_kracken.htm
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.htm.2m_kracken.html
+ txt2man
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man2/M_kracken.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .3m_kracken.htm
+ SHORTNAME=M_kracken
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html
+ txt2man
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man3/M_kracken.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .4m_kracken.htm
+ SHORTNAME=M_kracken.3m_kracken.htm
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.htm.4m_kracken.html
+ txt2man
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man4/M_kracken.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .5m_kracken.htm
+ SHORTNAME=M_kracken.3m_kracken.htm
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ txt2man
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.htm.5m_kracken.html
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man5/M_kracken.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .6m_kracken.htm
+ SHORTNAME=M_kracken.3m_kracken.htm
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.htm.6m_kracken.html
+ txt2man
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man6/M_kracken.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .7m_kracken.htm
+ SHORTNAME=M_kracken.3m_kracken.htm
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.htm.7m_kracken.html
+ txt2man
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man7/M_kracken.3m_kracken
+ for NUM in 1 2 3 4 5 6 7 8
++ ls M_kracken.3m_kracken.htm
+ for NAME in $(ls *.htm 2>/dev/null)
+ echo '>>>> processing HTM to HTML for M_kracken.3m_kracken.htm'
>>>> processing HTM to HTML for M_kracken.3m_kracken.htm
++ basename M_kracken.3m_kracken.htm .8m_kracken.htm
+ SHORTNAME=M_kracken.3m_kracken.htm
+ htm2html
+ echo '>>>> processing HTML to manpage for M_kracken.3m_kracken.htm'
>>>> processing HTML to manpage for M_kracken.3m_kracken.htm
+ set -xv
+ html2txt /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.htm.8m_kracken.html
+ txt2man
++ basename M_kracken.3m_kracken.htm .htm
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
++ basename M_kracken.3m_kracken.htm .htm
+ gzip -f /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/man8/M_kracken.3m_kracken
+ echo '>>>> *.html files to DOC DIRECTORY'
>>>> *.html files to DOC DIRECTORY
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.1m_kracken.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.2m_kracken.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.3m_kracken.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.4m_kracken.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.5m_kracken.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.6m_kracken.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.7m_kracken.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.8m_kracken.html'
+ echo '>>>> Build manpage index'
>>>> Build manpage index
+ cd ../../man
+ mandb -c .
mandb: warning: $MANPATH set, inserting /etc/manpath.config
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man1'. Wait...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/....
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man1/M_kracken.3m_kracken.gz: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man3'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man2'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man2/M_kracken.3m_kracken.gz: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man4'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man4/M_kracken.3m_kracken.gz: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man6'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man6/M_kracken.3m_kracken.gz: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man7'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man7/M_kracken.3m_kracken.gz: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man8'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man8/M_kracken.3m_kracken.gz: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man5'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./man5/M_kracken.3m_kracken.gz: ignoring bogus filename
done.
Checking for stray cats under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/....
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat8...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat1...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat3...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat4...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat6...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat2...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat5...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man/./cat7...
8 man subdirectories contained newer manual pages.
19 manual pages were added.
0 stray cats were added.
++ pwd
+ env MANPATH=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man man -k .
ARGUMENTS (3)        - [ARGUMENTS::INTRO] collection of command line argument...
dget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch doubleprecis...
dgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch doubleprecis...
dissect (3m_kracken) - [ARGUMENTS:M_kracken] convenient call to parse() - def...
iget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch integer valu...
igets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch integer arra...
kracken (3m_kracken) - [ARGUMENTS:M_kracken] crack command line options on Fo...
lget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch logical valu...
lgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch logical arra...
M_kracken (3m_kracken) - [ARGUMENTS:M_kracken] parse command line options of ...
parse (3m_kracken)   - [ARGUMENTS:M_kracken] parse user command and store tok...
retrev (3m_kracken)  - [ARGUMENTS:M_kracken] get keyword value as a string fr...
rget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch real value f...
rgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch real array f...
setprompts (3m_kracken) - [ARGUMENTS:M_kracken] set explicit prompts for keyw...
sget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch string value...
sgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch string value...
show (3m_kracken)    - [ARGUMENTS:M_kracken] dump dictionary entries (LICENSE...
store (3m_kracken)   - [ARGUMENTS:M_kracken] add or replace value for specifi...
+ echo '>>>> make easily distributed archive files of manpages'
>>>> make easily distributed archive files of manpages
+ mkdir -p ../../docs
+ cd ../../man
+ gzip man1/M_kracken.3m_kracken.gz man2/M_kracken.3m_kracken.gz man3/dget.3m_kracken.gz man3/dgets.3m_kracken.gz man3/dissect.3m_kracken.gz man3/iget.3m_kracken.gz man3/igets.3m_kracken.gz man3/kracken.3m_kracken.gz man3/lget.3m_kracken.gz man3/lgets.3m_kracken.gz man3/M_kracken.3m_kracken.gz man3/parse.3m_kracken.gz man3/retrev.3m_kracken.gz man3/rget.3m_kracken.gz man3/rgets.3m_kracken.gz man3/setprompts.3m_kracken.gz man3/sget.3m_kracken.gz man3/sgets.3m_kracken.gz man3/show.3m_kracken.gz man3/store.3m_kracken.gz man4/M_kracken.3m_kracken.gz man5/M_kracken.3m_kracken.gz man6/M_kracken.3m_kracken.gz man7/M_kracken.3m_kracken.gz man8/M_kracken.3m_kracken.gz
gzip: man1/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man2/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/dget.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/dgets.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/dissect.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/iget.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/igets.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/lget.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/lgets.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/parse.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/retrev.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/rget.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/rgets.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/setprompts.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/sget.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/sgets.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/show.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man3/store.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man4/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man5/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man6/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man7/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
gzip: man8/M_kracken.3m_kracken.gz already has .gz suffix -- unchanged
+ zip -r ../docs/manpages.zip man1/M_kracken.3m_kracken.gz man2/M_kracken.3m_kracken.gz man3/ARGUMENTS.3.gz man3/dget.3m_kracken.gz man3/dgets.3m_kracken.gz man3/dissect.3m_kracken.gz man3/iget.3m_kracken.gz man3/igets.3m_kracken.gz man3/kracken.3m_kracken.gz man3/lget.3m_kracken.gz man3/lgets.3m_kracken.gz man3/M_kracken.3m_kracken.gz man3/parse.3m_kracken.gz man3/retrev.3m_kracken.gz man3/rget.3m_kracken.gz man3/rgets.3m_kracken.gz man3/setprompts.3m_kracken.gz man3/sget.3m_kracken.gz man3/sgets.3m_kracken.gz man3/show.3m_kracken.gz man3/store.3m_kracken.gz man4/M_kracken.3m_kracken.gz man5/M_kracken.3m_kracken.gz man6/M_kracken.3m_kracken.gz man7/M_kracken.3m_kracken.gz man8/M_kracken.3m_kracken.gz
updating: man1/M_kracken.3m_kracken.gz (stored 0%)
updating: man3/ARGUMENTS.3.gz (stored 0%)
updating: man3/dget.3m_kracken.gz (stored 0%)
updating: man3/dgets.3m_kracken.gz (stored 0%)
updating: man3/dissect.3m_kracken.gz (stored 0%)
updating: man3/iget.3m_kracken.gz (stored 0%)
updating: man3/igets.3m_kracken.gz (stored 0%)
updating: man3/kracken.3m_kracken.gz (stored 0%)
updating: man3/lget.3m_kracken.gz (stored 0%)
updating: man3/lgets.3m_kracken.gz (stored 0%)
updating: man3/M_kracken.3m_kracken.gz (stored 0%)
updating: man3/parse.3m_kracken.gz (stored 0%)
updating: man3/retrev.3m_kracken.gz (stored 0%)
updating: man3/rget.3m_kracken.gz (stored 0%)
updating: man3/rgets.3m_kracken.gz (stored 0%)
updating: man3/setprompts.3m_kracken.gz (stored 0%)
updating: man3/sget.3m_kracken.gz (stored 0%)
updating: man3/sgets.3m_kracken.gz (stored 0%)
updating: man3/show.3m_kracken.gz (stored 0%)
updating: man3/store.3m_kracken.gz (stored 0%)
updating: man2/M_kracken.3m_kracken.gz (stored 0%)
updating: man4/M_kracken.3m_kracken.gz (stored 0%)
updating: man5/M_kracken.3m_kracken.gz (stored 0%)
updating: man6/M_kracken.3m_kracken.gz (stored 0%)
updating: man7/M_kracken.3m_kracken.gz (stored 0%)
updating: man8/M_kracken.3m_kracken.gz (stored 0%)
+ tar cvfz ../docs/manpages.tgz man1/M_kracken.3m_kracken.gz man2/M_kracken.3m_kracken.gz man3/ARGUMENTS.3.gz man3/dget.3m_kracken.gz man3/dgets.3m_kracken.gz man3/dissect.3m_kracken.gz man3/iget.3m_kracken.gz man3/igets.3m_kracken.gz man3/kracken.3m_kracken.gz man3/lget.3m_kracken.gz man3/lgets.3m_kracken.gz man3/M_kracken.3m_kracken.gz man3/parse.3m_kracken.gz man3/retrev.3m_kracken.gz man3/rget.3m_kracken.gz man3/rgets.3m_kracken.gz man3/setprompts.3m_kracken.gz man3/sget.3m_kracken.gz man3/sgets.3m_kracken.gz man3/show.3m_kracken.gz man3/store.3m_kracken.gz man4/M_kracken.3m_kracken.gz man5/M_kracken.3m_kracken.gz man6/M_kracken.3m_kracken.gz man7/M_kracken.3m_kracken.gz man8/M_kracken.3m_kracken.gz
man1/M_kracken.3m_kracken.gz
man2/M_kracken.3m_kracken.gz
man3/ARGUMENTS.3.gz
man3/dget.3m_kracken.gz
man3/dgets.3m_kracken.gz
man3/dissect.3m_kracken.gz
man3/iget.3m_kracken.gz
man3/igets.3m_kracken.gz
man3/kracken.3m_kracken.gz
man3/lget.3m_kracken.gz
man3/lgets.3m_kracken.gz
man3/M_kracken.3m_kracken.gz
man3/parse.3m_kracken.gz
man3/retrev.3m_kracken.gz
man3/rget.3m_kracken.gz
man3/rgets.3m_kracken.gz
man3/setprompts.3m_kracken.gz
man3/sget.3m_kracken.gz
man3/sgets.3m_kracken.gz
man3/show.3m_kracken.gz
man3/store.3m_kracken.gz
man4/M_kracken.3m_kracken.gz
man5/M_kracken.3m_kracken.gz
man6/M_kracken.3m_kracken.gz
man7/M_kracken.3m_kracken.gz
man8/M_kracken.3m_kracken.gz
+ gunzip man1/M_kracken.3m_kracken.gz man2/M_kracken.3m_kracken.gz man3/dget.3m_kracken.gz man3/dgets.3m_kracken.gz man3/dissect.3m_kracken.gz man3/iget.3m_kracken.gz man3/igets.3m_kracken.gz man3/kracken.3m_kracken.gz man3/lget.3m_kracken.gz man3/lgets.3m_kracken.gz man3/M_kracken.3m_kracken.gz man3/parse.3m_kracken.gz man3/retrev.3m_kracken.gz man3/rget.3m_kracken.gz man3/rgets.3m_kracken.gz man3/setprompts.3m_kracken.gz man3/sget.3m_kracken.gz man3/sgets.3m_kracken.gz man3/show.3m_kracken.gz man3/store.3m_kracken.gz man4/M_kracken.3m_kracken.gz man5/M_kracken.3m_kracken.gz man6/M_kracken.3m_kracken.gz man7/M_kracken.3m_kracken.gz man8/M_kracken.3m_kracken.gz
+ echo '>>>> extract demo pages from manpages'
>>>> extract demo pages from manpages
+ cd /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man
++ pwd
+ MANPATH=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man
+ SECTION=3m_kracken
+ DEMO_OUTDIR=../../example
+ GPF_extract_manpage_demos /home/urbanjs/venus/V600/github7/ARGS/M_kracken/man 3m_kracken ../../example
>>>> Extract demo program from manpages with
     MANPATH=/home/urbanjs/venus/V600/github7/ARGS/M_kracken/man
     SECTION=3m_kracken
     DEMO_OUTDIR=../../example
     DEMO_SUBDIR=FALSE
     1	ARGUMENTS (3)        - [ARGUMENTS::INTRO] collection of command line argument...
     2	dget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch doubleprecis...
     3	dgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch doubleprecis...
     4	dissect (3m_kracken) - [ARGUMENTS:M_kracken] convenient call to parse() - def...
     5	iget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch integer valu...
     6	igets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch integer arra...
     7	kracken (3m_kracken) - [ARGUMENTS:M_kracken] crack command line options on Fo...
     8	lget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch logical valu...
     9	lgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch logical arra...
    10	M_kracken (3m_kracken) - [ARGUMENTS:M_kracken] parse command line options of ...
    11	parse (3m_kracken)   - [ARGUMENTS:M_kracken] parse user command and store tok...
    12	retrev (3m_kracken)  - [ARGUMENTS:M_kracken] get keyword value as a string fr...
    13	rget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch real value f...
    14	rgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch real array f...
    15	setprompts (3m_kracken) - [ARGUMENTS:M_kracken] set explicit prompts for keyw...
    16	sget (3m_kracken)    - [ARGUMENTS:M_kracken] given keyword fetch string value...
    17	sgets (3m_kracken)   - [ARGUMENTS:M_kracken] given keyword fetch string value...
    18	show (3m_kracken)    - [ARGUMENTS:M_kracken] dump dictionary entries (LICENSE...
    19	store (3m_kracken)   - [ARGUMENTS:M_kracken] add or replace value for specifi...
>>>> dget.3m_kracken
>>>> dgets.3m_kracken
>>>> dissect.3m_kracken
>>>> iget.3m_kracken
>>>> igets.3m_kracken
>>>> kracken.3m_kracken
>>>> lget.3m_kracken
>>>> lgets.3m_kracken
>>>> M_kracken.3m_kracken
troff: <standard input>:537: warning [p 7, 4.3i]: can't break line
troff: <standard input>:539: warning [p 7, 4.7i]: can't break line
troff: <standard input>:541: warning [p 7, 5.0i]: can't break line
troff: <standard input>:543: warning [p 7, 5.3i]: can't break line
troff: <standard input>:545: warning [p 7, 5.7i]: can't break line
troff: <standard input>:547: warning [p 7, 6.0i]: can't break line
troff: <standard input>:549: warning [p 7, 6.3i]: can't break line
troff: <standard input>:551: warning [p 7, 6.7i]: can't break line
troff: <standard input>:554: warning [p 7, 7.0i]: can't break line
troff: <standard input>:557: warning [p 7, 7.3i]: can't break line
troff: <standard input>:559: warning [p 7, 7.7i]: can't break line
troff: <standard input>:561: warning [p 7, 8.0i]: can't break line
troff: <standard input>:563: warning [p 7, 8.3i]: can't break line
troff: <standard input>:565: warning [p 7, 8.7i]: can't break line
troff: <standard input>:567: warning [p 7, 9.0i]: can't break line
troff: <standard input>:569: warning [p 7, 9.3i]: can't break line
troff: <standard input>:571: warning [p 7, 9.7i]: can't break line
troff: <standard input>:573: warning [p 7, 10.0i]: can't break line
troff: <standard input>:575: warning [p 7, 10.3i]: can't break line
troff: <standard input>:577: warning [p 7, 10.7i]: can't break line
troff: <standard input>:579: warning [p 8, 0.0i]: can't break line
troff: <standard input>:581: warning [p 8, 0.3i]: can't break line
troff: <standard input>:583: warning [p 8, 0.7i]: can't break line
troff: <standard input>:585: warning [p 8, 1.0i]: can't break line
>>>> parse.3m_kracken
troff: <standard input>:78: warning: macro 'define'' not defined (possibly missing space after 'de')
troff: <standard input>:80: warning: macro 'add'' not defined (possibly missing space after 'ad')
>>>> retrev.3m_kracken
>>>> rget.3m_kracken
>>>> rgets.3m_kracken
>>>> setprompts.3m_kracken
>>>> sget.3m_kracken
>>>> sgets.3m_kracken
>>>> show.3m_kracken
>>>> store.3m_kracken
ARGUMENTS.3.man(3m_kracken)			   ARGUMENTS.3.man(3m_kracken)



NAME
  ARGUMENTS(3f) - [ARGUMENTS::INTRO] collection of command line argument
  parsers


SYNOPSIS
  <h3>SPECIAL-PURPOSE PUBLIC ROUTINES:</h3>

     use M_kracken
     use M_kracken,  only : kracken
     use M_kracken,  only : rget,dget,iget,lget,sget,retrev
     use M_krackens, only : rgets,dgets,igets,lgets,sgets
     use M_kracken,  only : print_kracken_dictionary
     use M_kracken,  only : cmd_args_to_dictionary, unnamed
     use M_getopt
     use M_getopt_long


DESCRIPTION
  The following command line argument parser modules are available:

  •  M_kracken parse command line options of Fortran programs using Unix-like
     syntax (LICENSE:PD)

  •  M_getopt parse command line arguments. Similar to those in standard C
     library.  (LICENSE:GPL)

  •  M_getopt_long parse command line options like Sun getopt_long, including
     the Sun CLIP specification (LICENSE:PD)

  •  M_args parse commands using NAMELIST format or Unix-like syntax and
     produce a NAMELIST string to allow argument parsing without having to
     convert strings to various variable types (LICENSE:PD)

M_KRACKEN
  M_kracken(3f) is a module to parse command line options of Fortran programs
  using Unix-like syntax.  The main differences in syntax are that negative
  values and multi-word values rarely need quotes around them, and that the
  "unnamed" parameter is first on the command line. It contains:

   BASE ROUTINES
  kracken
    - crack command line options on Fortran programs, using "-KEYWORD VALUE"
    syntax

  retrev
    - get keyword value as a string from a command's argument list

   CONVENIENCE ROUTINES FOR FETCHING VALUES
  dget
    - given keyword fetch doubleprecision value from command argument

  iget
    - given keyword fetch integer value from command argument

  lget
    - given keyword fetch logical value from command arguments

  rget
    - given keyword fetch real value from command argument

  sget
    - given keyword fetch string value and length from command arguments

  dgets
    - given keyword fetch doubleprecision array from command arguments

  igets
    - given keyword fetch integer array from command arguments

  lgets
    - given keyword fetch logical array from command argument

  rgets
    - given keyword fetch real array from command arguments

  sgets
    - given keyword fetch string value parsed on whitespace into an array

   AUXILIARY COMMAND FOR SETTING PROMPTS
  setprompts
    - set explicit prompts for keywords in interactive mode

   AUXILIARY COMMANDS FOR USE IN BUILDING CLI
  (CLI) Command Line Interface routines can be used to read shell-like input
  and configuration files

  dissect
    - convenient call to parse() - define defaults, then process

  parse
    - parse user command and store tokens into Language Dictionary

  show
    - dump dictionary entries

  store
    - replace dictionary name's value (if allow=add add name if necessary)



				April 16, 2023	   ARGUMENTS.3.man(3m_kracken)
dget(3m_kracken)					      dget(3m_kracken)



NAME
  dget(3f) - [ARGUMENTS:M_kracken] given keyword fetch doubleprecision value
  from command argument (LICENSE:PD)


SYNOPSIS
  function dget(keyword) result(value)

      character(len=*),intent(in)  :: keyword
      doubleprecision		   :: value


DESCRIPTION
  The dget(3f) function returns a scalar doubleprecision value from a command
  line argument using the M_kracken(3fm) module.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a
    doubleprecision value.

RETURNS
  VALUE
    doubleprecision value returned by function

EXAMPLE
  Sample program

     program demo_dget
     use M_kracken, only: kracken, dget
     implicit none
     doubleprecision :: val
       ! define command arguments and parse user command
       call kracken('demo','-val 3.1416' )
       val=dget('demo_val') ! get any values specified on -val option
       write(*,*)val	     ! print the value
     end program demo_dget

  Example program runs:

     $ demo_dget
	3.14159989

     $ demo_dget -val 10
	10.0000000

     $ demo_dget -val 3.000
	3.00000000

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		      dget(3m_kracken)
dissect(3m_kracken)					   dissect(3m_kracken)



NAME
  dissect(3f) - [ARGUMENTS:M_kracken] convenient call to parse() -- define
  defaults, then process (LICENSE:PD)


SYNOPSIS
  subroutine dissect(verb,init,pars,error_return)

     character(len=*),intent(in)  :: verb
     character(len=*),intent(in)  :: init
     character(len=*),intent(in)  :: pars
     integer,intent(out),optional :: error_return

DESCRIPTION
OPTIONS
  VERB
    the name of the command to be reset/defined

  INIT
    used to define command options; usually hard-set in the program.

  PARS
    defines the command options to be set, usually from user input

RETURNS
  ERROR_RETURN
    error code. If zero no error occurred.

EXAMPLE
  Sample program:

      program demo_dissect
      use M_kracken, only : kracken,iget,rget,sget,dissect
      implicit none
      integer :: ierr

      call dissect('demo',' -int 1000 -float 1234.567 -str CHARACTER value','-int 456 -float 50.00 ',ierr)
      write(*,'(a,i0)')'INTEGER IS ',iget('demo_int')
      write(*,'(a,g0)')'REAL IS ',rget('demo_float')
      write(*,'(a,a)')'STRING IS '//trim(sget('demo_str'))

      end program demo_dissect

  Results:

     INTEGER IS 456
     REAL IS 50.0000000
     STRING IS CHARACTER value


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		   dissect(3m_kracken)
iget(3m_kracken)					      iget(3m_kracken)



NAME
  iget(3f) - [ARGUMENTS:M_kracken] given keyword fetch integer value from
  command argument (LICENSE:PD)


SYNOPSIS
  function iget(keyword) result(value)

      character(len=*),intent(in)  :: keyword
      integer		   :: value


DESCRIPTION
  The iget(3f) function returns a scalar integer value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a integer
    value.

RETURNS
  VALUE
    integer value returned by function

EXAMPLE
  Sample program

     program demo_iget
     use M_kracken, only: kracken, iget
     implicit none
     integer :: val
       ! define command arguments and parse user command
       call kracken('demo','-val 31416' )
       val=iget('demo_val') ! get any values specified on -val option
       write(*,*)val	    ! print the value
     end program demo_iget

  Example program runs:

     $ demo_iget
	31416

     $ demo_iget -val 10
	10

     $ demo_iget -val 3.000
	3


SEE ALSO
  M_kracken(3fm), kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		      iget(3m_kracken)
lgets(3m_kracken)					     lgets(3m_kracken)



NAME
  lget(3f) - [ARGUMENTS:M_kracken] given keyword fetch logical array from
  command argument (LICENSE:PD)


SYNOPSIS
  function lgets(keyword) result(lvals)

      character(len=*),intent(in)  :: keyword
      logical,allocatable	   :: lvals(:)


DESCRIPTION
  The lgets(3f) function returns a dynamically allocated array of logical
  values from a string that is the value for a command line option. It is part
  of the M_kracken(3fm) module.

  Values that cannot be read as a logical value are returned as a ".FALSE.".

OPTIONS
  keyword
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the second argument to the KRACKEN(3f) call.

RETURNS
  lvals
    logical array returned by function. The input value should be from the
    case-insensitive list of the words "true, false, t, f, yes, no, y, n,
    .false., .true., .f., .t".

EXAMPLE
  Sample program:

     program demo_lgets
     use M_kracken, only: kracken, lgets
     implicit none
     logical,allocatable  :: vals(:)
       ! define command arguments and parse user command
       call kracken('demo','-truths .F. .T. .F. .F. .T. .T.' )
       ! get any values specified on command line for -truth
       vals=lgets('demo_truths')
       write(*,*)vals
     end program demo_lgets

  Example program runs:

     $ demo_lgets

   F T F F T T
  $ demo_lgets -truths false F .f. no true .true. t T Yes No

   F F F F T T T T T T F
SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		     lgets(3m_kracken)
untitled()							    untitled()



	      [1][GPF Home Page]

       KRACKEN(3F): The Fortran Command Line Argument Cracker (Extended
       Version)

	  This version is dependent upon Fortran 2008 features and other GPF
	  (General Purpose Fortran) modules. See the simpler [2]Fortran 2003 and
	  FORTRAN 77 versions if you are looking for older stable versions that
	  do not require other CLI (Command Line Interface) modules from the GPF
	  collection.
	    * [3]Abstract
	    * [4]Example of typical use
	    * [5]Routine Descriptions
	    * [6]Using the interactive menu mode of prompting
	    * [7]Usage notes
	    * [8]Alternate parsing of the command line arguments

	  To get a demonstration program and the source for the M_kracken module
	  download the [9]source files for the module, other modules it is
	  dependent on, and many example programs that call KRACKEN(3f).


NAME
  M_kracken(3fm) - [ARGUMENTS:M_kracken] parse command line options of Fortran
  programs using Unix-like syntax (LICENSE:PD)


ABSTRACT
  KRACKEN(3f) is a Fortran command line argument parser designed to provide
  for easy entry of lists of negative numbers, strings, and exponential
  numbers without generally requiring quotes on the command line. It provides:

    •  a standard Unix-like style for parsing arguments and keywords

    •  a clear way to specify allowable keywords and default values

    •  simple access to the parsed data from procedures

    •  easy conversion from strings to numbers

    •  easy conversion from strings to arrays

    •  a simple menu-driven interactive mode for modifying parameters

  You can call your command like this: mycode -r 333.333 -file /home/testin -l
  -i 300

     with very little code:

  Example Usage

  program myprogram

     use M_kracken
     character(255) filename
     logical lval
     !	define command arguments, default values and crack command line
     call kracken('cmd','-i 10 -r 10e3 -d 4.1123344d0 -l .false. -file input')
     !	get values
     call retrev('cmd_f',filename,iflen,ier) ! get -f FILENAME
     lval = lget('cmd_l')		     ! get -l present?
     rval = rget('cmd_r')		     ! get -r RVAL
     dval = dget('cmd_d')		     ! get -d DBLEVAL
     ival = iget('cmd_i')		     ! get -i IVAL
     !	all done parsing; do something with the values
     print *, "filename=",filename(:iflen)
     print *, " i=",ival, " r=",rval, " l=",lval, "d=",dval
  end program myprogram

     See the documentation for the procedures for detailed descriptions.
     Each procedure description includes a working example program.

  The Routines

       [10]kracken define command options and defautroff: <standard input>:537: warning [p 7, 4.3i]: can't break line
troff: <standard input>:539: warning [p 7, 4.7i]: can't break line
troff: <standard input>:541: warning [p 7, 5.0i]: can't break line
troff: <standard input>:543: warning [p 7, 5.3i]: can't break line
troff: <standard input>:545: warning [p 7, 5.7i]: can't break line
troff: <standard input>:547: warning [p 7, 6.0i]: can't break line
troff: <standard input>:549: warning [p 7, 6.3i]: can't break line
troff: <standard input>:551: warning [p 7, 6.7i]: can't break line
troff: <standard input>:554: warning [p 7, 7.0i]: can't break line
troff: <standard input>:557: warning [p 7, 7.3i]: can't break line
troff: <standard input>:559: warning [p 7, 7.7i]: can't break line
troff: <standard input>:561: warning [p 7, 8.0i]: can't break line
troff: <standard input>:563: warning [p 7, 8.3i]: can't break line
troff: <standard input>:565: warning [p 7, 8.7i]: can't break line
troff: <standard input>:567: warning [p 7, 9.0i]: can't break line
troff: <standard input>:569: warning [p 7, 9.3i]: can't break line
troff: <standard input>:571: warning [p 7, 9.7i]: can't break line
troff: <standard input>:573: warning [p 7, 10.0i]: can't break line
troff: <standard input>:575: warning [p 7, 10.3i]: can't break line
troff: <standard input>:577: warning [p 7, 10.7i]: can't break line
troff: <standard input>:579: warning [p 8, 0.0i]: can't break line
lts and parse command
  line

       [11]retrev get value for a keyword as a string

  The returned strings obtained by calls to RETREV(3f) can be converted to
  numeric values using procedures from the M_strings(3fm) module such as
  STRING_TO_VALUE(3F), which converts strings to a numeric value, and
  SPLIT(3F), which can break a string into a list of words. But more commonly,
  the following cotroff: <standard input>:581: warning [p 8, 0.3i]: can't break line
nvenience routines are used ...

    There are scalar convenience functions for getting simple values that are
    used in most cases as an alternative to RETREV(3f) that convert the values
    directly to common scalar types: lval=[12]lget(VERB_ARGNAME) !gets a
    "logical" value.  rval=[13]rget(VERB_ARGNAME) !gets a "real" value.
    dval=[14]dget(VERB_ARGNAME) !gets a "doubleprecision" value.
    ival=[15]iget(VERB_ARGNAME) !gets a "integer" value
    sval=[16]sget(VERB_ARGNAME) !gets a "character" value

    There are also convenience routines for returning arrays of scalar values
    that typically use allocatable arrays. Just add 's' to the end of the
    scalar convenience functions.  lvals=[17]lgets(VERB_ARGNAME) !gets a
    "logical" array.  rvals=[18]rgets(VERB_ARGNAME) !gets a "real" array.
    dvals=[19]dgets(VERB_ARGNAME) !gets a "doubleprecision" array.
    ivals=[20]igets(VERB_ARGNAME) !gets a "integer" array
    svals=[21]sgets(VERB_ARGNAME) !gets a "character" array

  SPECIAL-PURPOSE PUBLIC ROUTINES:

      Setting command prompts


    public :: setprompts
      ! define prompts for commands in interactive mode

	Only needed for parsing input files, not cracking command line arguments


    [22]dissect
      ! for user-defined commands: define defaults, then process user input

    [23]parse
      ! parse user command and store tokens into Language Dictionary

    [24]store
      ! replace dictionary name's value (if allow=add add name if nece ssary)

    [25]show
      ! display dictionary contents for information

	length of verbs and entries in Language dictionary

    NOTE: many parameters may be reduced in size so as to just accommodate
    being used as a command line parser. In particular, some might want to
    change:

    logical,public
      :: stop_command=.false. ! indication to return stop _command as false in
      interactive mode

    integer, parameter,public :: IPvalue=4096*16
      ! length of keyword value

    integer, parameter,public :: IPverb=20
      ! length of verb

    character(len=1),save,public
      :: kracken_comment='#'

    character(len=:),allocatable,public
      :: leftover		  ! remaining command(s) on line

    integer,public,save
      :: current_command_length=0 ! length of options for current command

  Interactive menu mode

     The menu mode feature is in a state of flux and may change
     significantly ...

     All commands automatically have the parameter "-?". If it is present, a
     menu appears after any specified options have been applied that allows
     for changing parameters interactively.

     The default prompts are the keywords themselves and their current
     values. To set your own prompts call SETPROMPTS(3f):
     call setprompts(verb_name,options_and_prompts)

     where the special prompt string "#N#" means to not allow prompting for
     this parameter. For example:
       ! set prompts for interactive troff: <standard input>:583: warning [p 8, 0.7i]: can't break line
mode ...
       call setprompts('copy',' 			  &
       & -oo "#N#"					  &
       & -i Enter input file name			  &
       & -o Enter output file name			  &
       & -version "#N#" 				  &
       & -help "#N#"					  &
       & ')
       call kracken('copy','-i -o -version .false. -help .false')

     Then the command
	copy -?

     would only prompt for the -i and -o parameters.

     A description on how to use the menu mode can be generated by entering
     a question mark ("?") at the prompt once menu mode has been invoked.

  Usage Notes

    the reserved -oo keyword

     Everything before any switch is always referred to as 'VERB_oo' in
     RETREV(3f). This same value can also be set later in the command line
     by using the reserved troff: <standard input>:585: warning [p 8, 1.0i]: can't break line
keyword -oo (or the alias --). Often, you can
     ignore it exists, but the -oo option is always there. Unlike other
     parameters a default value is ignored unless no parameters are
     specified on the command line. That is, in general do not set a default
     value for the -oo parameter. It should almost always be initially a
     blank string.

     Note that you can just put the calls to RETREV() or the convenience
     routines where you need the information in your program instead of
     parsing everything in a single routine. But parsing them and storing
     them into a COMMON or MODULE is more efficient if the routine doing the
     parsing is called many times.
    Sample showing -oo parameter and retrieving data in subroutines

       program demo_M_kracken
       use M_kracken, only : kracken
       implicit none
       real :: x, y
       ! define and crack command line arguments
       call kracken('cmd',' DEFAULT STRING -x 123 -y 456 ')
       call showstring()
       call showvalue()
       contains

       subroutine showstring()
       use M_kracken, only : sget
       character(len=:),allocatable :: string
       ! get value of string before any switch
       string=trim(sget('cmd_oo'))
       write(*,*)'string is ',string
       end subroutine showstring

       subroutine showvalue()
       use M_kracken, only : rget
       ! show values for -x and -y parameters
       x=rget('cmd_x')
       y=rget('cmd_y')
       write(*,*)' X and Y are ',x,y
       end subroutine showvalue

       end program demo_M_kracken

	xxx
	 string is DEFAULT STRING
	  X and Y are	 123.000000	  456.000000

	xxx -x 987.653992
	 string is
	  X and Y are	 987.653992	  456.000000

	xxx -oo BBBB -oo CCCC
	 string is BBBB CCCC
	  X and Y are	 123.000000	  456.000000

	xxx AAAA BBBB -oo CCCC
	 string is AAAA BBBB CCCC
	  X and Y are	 123.000000	  456.000000

     You may note that the parsing rules are not identical to Unix, although
     very similar.

  SYNTAX:

    verb[-oo|--] value for kw_oo
      [-kw1 value_for_kw1] [-kw2 value_for_kw2] [-kw3 va lue_for_kw3] ...
      where "kw" stands for a keyword name

      •  Quotes are rarely needed. A keyword is assumed whenever " -[A-Za-Z]"
	 (space followed by dash followed by letter) is encountered. So cmd
	 -title This is my title -value 10.3e2

	 would produce a value of "This is my title" for dictionary value
	 "cmd_title". This does mean if your value contains " -letter" you
	 must quote your command such that the program sees the string
	 surrounded with double-quotes. Depending on the shell you are using
	 this can be awkward. For example, in the bash shell you might use cmd
	 -title '"-A is a bad title to need"' cmd -title /"-A is a bad title
	 to need/"

      •  The keyword -oo is implied after the verb.

      •  There is no way to terminate a keyword value except by starting a new
	 keyword. This means when you use shell globbing you often want
	 filenames to be the first parameter (and dictionary "cmd_oo" will
	 hold the filenames): cmd * -value 10.3e2

	 Many (but not all) Unix commands have such values allowed wherever
	 another value is not allowed (Surprised? "ls -r * -l" works as well
	 as "ls -r -l *" .). This is why quoting and specification of which
	 keywords require values and which do not is usually required on Unix
	 commands. Alternatively, just ignore the -oo field and always require
	 keywords for all values.

      •  You cannot combine keywords (-ir is not equivalent to -i -r, which is
	 sometimes allowed on Unix commands).

      •  Although this is rarely needed in practice, You may find the way to
	 include a literal double-quote character (") as part of an input
	 value is the most unlike Unix -- Double the double-quote. Again,
	 shells often expand double-quotes, so in the bash(1) shell you might
	 have to enter

	 cmd
	   -string \"\"

      to give the "cmd_string" dictionary value the simple value '"'.

      •  --KEYWORD is equivalent to -KEYWORD; primarily so that the --version
	 and --help options are easily supported.

      •  If a ktroff: <standard input>:78: warning: macro 'define'' not defined (possibly missing space after 'de')
troff: <standard input>:80: warning: macro 'add'' not defined (possibly missing space after 'ad')
eyword is specified multiple times the values are concatenated
	 into a single value with a space delimiter between the values. That
	 is, cmd -D 10 -D 20 -D 30

	     would set the dictionary variable "cmd_D" to '10 20 30'.

      •  All commands automatically have the -? keyword, which evokes
	 interactive menu mode.

    Alternate command line input syntax

       If you actually prefer quoting your arguments and having your unnamed
       variables at the end of your command and support for the "--" option
       supported by some GNU and Unix commands you can set the command line
       parsing option "style='args'". This will not change how you specify the
       parameters to the kracken(3f) command except possibly for Boolean
       switches, but allows for entering commands in a manner more like the C
       routine getopts(3c). If you turn the mode on the "-oo" parameter is
       ignored unless you specifically assign it a value by name; the values
       need quoted if they contain spaces and the option "--" specifies that
       the rest of the command line is composed of unnamed strings. The
       unnamed values will go into the CHARACTER array "unnamed". The way the
       command line input is parsed is the same as in the M_args(3f) module.
       That means instead of entering:

	 program show_standard
	 use M_kracken, only : kracken, sgets, rget, sget, lget
	 implicit none
	 character(len=:),allocatable :: files(:)
	 character(len=:),allocatable :: title
	 real :: x,y
	 integer :: i
	 ! define and crack command line arguments
	 call kracken('cmd',' --title this is my title -x 123 -y 456 --help .false.'
    )

	 title=sget('cmd_title')
	 x=rget('cmd_x')
	 y=rget('cmd_y')
	 write(*,*)'help=',lget('cmd_help')
	 write(*,*)' title is ',title
	 write(*,*)' x and y are ',x,y
	 ! get value of string before any switch
	 files=sgets('cmd_oo')
	 if(size(files).gt.0)then
	    do i=1,size(files)
	       write(*,*)i,files(i)
	    enddo
	 endif
	 end program show_standard

    Add "style='args'" to the kracken call and "unnamed" from the
    M_kracken(3fm) module, and the unnamed values will be in the string array
    "unnamed" instead of obtained from something like "sgets('cmd_oo').

      With "style='args' other differences are in how you specify your command
      prototype. You MUST use the string ".false." for any boolean switch
      variable default value; and basically the values ".true." and ".false."
      are reserved, regardless of case. This is normally how you specify
      booleans anyway; but in the default style you can set your default to
      ".true." or use other values for ".false." like "F" or ".F.".

      The way the arguments will then be read upon input are the same as
      described in the M_args(3fm) module.

	   program show_alternate
	   use M_kracken, only : kracken, sget, rget, lget
	   USE M_KRACKEN, ONLY : UNNAMED
	   implicit none
	   character(len=:),allocatable :: title
	   real :: x,y
	   integer :: i
	   ! define and crack command line arguments
	   !
	   !
	   call kracken('cmd',' --title this is my title &
	    & -x 123 -y 456 --help .false.',style='args')
	   title=sget('cmd_title')
	   x=rget('cmd_x')
	   y=rget('cmd_y')
	   write(*,*)'help=',lget('cmd_help')
	   write(*,*)' title is ',title
	   write(*,*)' x and y are ',x,y

	   IF(SIZE(UNNAMED).GT.0)THEN
	      DO I=1,SIZE(UNNAMED)
		 WRITE(*,*)I,UNNAMED(I)

   ENDDO
   ENDIF
  end program show_alternate Sample usage:

      # first program uses default M_kracken parsing

	 cmd *.f90 -x 100 --title A new title -y 200

      # or

	 cmd -x 100 --title A new title -y 200 -oo *.f90

      # second program uses alternate command-line parsing.
      # the unnamed values go into the string array
      # UNNAMED but can appear anywhere on the command.
      # multi-word values require being quoted.

      cmd -x 100 -y 200 --title 'A new title' *.f90

       Contributors:
       * John S. Urban -- Author (last change: Oct. 2019)
       * Felix Becker -- Enhancements to reduce limitations on parameter
	 lengths (2013-05-28)
       * Walid Keyrouz -- Upgrades to bring code into conformance with
	 recommended practices (2013-12-06)

  .fi</xmp </div> </div> </div> </div> </body> </html>

  References

    1.	http://www.urbanjost.altervista.org/LIBRARY/libGPF/GPF.html

    2.	file:///home/urbanjs/venus/V600/github7/arguments/src2015/krackenhelp.html

    3.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#ABSTRACT

    4.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#EX1

    5.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#DESCRIPTION

    6.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#MENU

    7.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#USAGE

    8.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#ARGS

    9.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/download.html

  10. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/kracken.3.html

      11. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/retrev.3.html

      12. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lget.3.html

      13. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rget.3.html

      14. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dget.3.html

      15. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/iget.3.html

      16. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sget.3.html

      17. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lgets.3.html

      18. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rgets.3.html

      19. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dgets.3.html

      20. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/igets.3.html

      21. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sgets.3.html

      22. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dissect.3.html

      23. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/parse.3.html

      24. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/store.3.html

      25. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/show.3.html



				April 16, 2023			    untitled()
parse(3m_kracken)					     parse(3m_kracken)



NAME
  parse(3f) - [ARGUMENTS:M_kracken] parse user command and store tokens into
  Language Dictionary (LICENSE:PD)


SYNOPSIS
  recursive subroutine parse(verb,string,allow,error_return)

     character(len=*),intent(in)     ::  verb
     character(len=*),intent(in)     ::  string
     character(len=*),intent(in)     ::  allow
     integer,optional,intent(out)    ::  error_return


DESCRIPTION
  given a string of form

       value  -var value -var value

  define variables of form

       verb_var(i) = value

  --var will become verb__var

  •  values may be in double quotes if they contain alphameric characters

  •  a # signifies the rest of the line is a comment

  •  adjacent double quotes put one double quote into value

  •  processing ends when an unquoted semi-colon or end of string is
     encountered

  •  the variable name for the first value is verb_init (often verb_oo)

  •  leading and trailing blanks are removed from values

  •  call it once to give defaults

  •  call it again and vars without values are set to null strings

OPTIONS
  VERB
    command name to process

  STRING
    string is character input string with first verb removed (options + other
    commands)

  ALLOW
    flag to allow or disallow new VERB_KEYWORD name being added. Should be

   NEW VARIABLES ARE ALLOWED
  •

  •

   NO NEW VARIABLES ARE ALLOWED
  •

  •

  That is, ff 'add' or 'append' and the value is not blank it will be APPENDED
  to the current value. If 'define' or to it.

RETURNS
  ERROR_RETURN
    error code. If zero, no error occurred

EXAMPLE
  sample program:

     program demo_parse
     use M_kracken, only : parse, sget, iget, rget
     use M_strings, only : chomp
     implicit none
     character(len=:),allocatable  :: verb
     character(len=*),parameter    :: delimiters=' ;,'
     integer	 :: i
     integer	 :: ierr
     character(len=132) :: line
     character(len=132), parameter :: commands(5)= [character(len=132) :: &
       'start -i 10 -message this is a message', &
       'end -i 20 -j 30 -k 55.55 ', &
       'list', &
       'help -oo', &
       'end -i 44.44 ']
       do i=1,size(commands)
	  line=commands(i) ! need mutable line
	  if(chomp(line,verb,delimiters).ge. 0)then
	     call parse(verb,line,'add',ierr)
	     write(*,*)'do whatever a '//verb//' command does'
	     select case(verb)
	     case('start')
		write(*,*)trim(sget('start_i'))
		write(*,*)trim(sget('start_message'))
	     case('end')
		write(*,*)iget('end_i')
		write(*,*)iget('end_j')
		write(*,*)rget('end_k')
	     case('list')
		write(*,*)'list things'
	     case('help')
		write(*,*)'show help text'
	     endselect
	  endif
       enddo
       ! look at some of the values as strings or numbers
       write(*,*)trim(sget('start_i'))
       write(*,*)trim(sget('start_message'))
       write(*,*)iget('end_i')
       write(*,*)iget('end_j')
       write(*,*)rget('end_k')
     end program demo_parse

  Results:

      do whatever a start command does
      10
      this is a message
      do whatever a end command does
	       20
	       30
	55.5499992
      do whatever a list command does
      list things
      do whatever a help command does
      show help text
      do whatever a end command does
	       44
	       30
	55.5499992
      10
      this is a message
	       44
	       30
	55.5499992


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		     parse(3m_kracken)
retrev(3m_kracken)					    retrev(3m_kracken)



NAME
  RETREV(3f) - [ARGUMENTS:M_kracken] get keyword value as a string from a
  command's argument list processed by kracken(3f) (LICENSE:PD)


SYNOPSIS
  SUBROUTINE retrev(name, string, len, ier)

     CHARACTER(len=*),intent(in)  :: name
     CHARACTER(len=*),intent(out) :: string
     INTEGER,intent(out)	  :: len
     INTEGER,intent(out)	  :: ier


DESCRIPTION
  When a command has had its command argument list parsed using the
  kracken(3f) routine the value associated with any keyword can be retrieved
  as a string.

OPTIONS
  NAME
    parameter name of form VERB_KEYWORD

  STRING
    returned parameter value

  LEN
    length of returned STRING

  IER
    error flag. Any non-zero value means an error occurred

EXAMPLE
  Sample program:

      program demo_retrev
      use M_kracken, only : kracken, retrev
      use M_kracken, only : IPvalue ! length of keyword value
      implicit none
      character(len=IPvalue) :: val
      integer		     :: len, ier

      call kracken('demo', ' -value my default string')
      call retrev('demo_value',val,len,ier)
      write(*,'(a)')'VALUE IS '//trim(val)

      end program demo_retrev

  Example execution and output:

      $ ./demo_retrev
      VALUE IS my default string

      $ ./demo_retrev -value use this value instead
      VALUE IS use this value instead


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		    retrev(3m_kracken)
rget(3m_kracken)					      rget(3m_kracken)



NAME
  rget(3f) - [ARGUMENTS:M_kracken] given keyword fetch real value from command
  argument (LICENSE:PD)


SYNOPSIS
  function rget(keyword) result(value)

      character(len=*),intent(in)  :: keyword
      real			   :: value


DESCRIPTION
  The rget(3f) function returns a scalar real value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a REAL
    value.

RETURNS
  VALUE
    real value returned by function

EXAMPLE
  Sample program

     program demo_rget
     use M_kracken, only: kracken, rget
     implicit none
     real :: val
       ! define command arguments and parse user command
       call kracken('demo','-val 3.1416' )
       val=rget('demo_val') ! get any values specified on -val option
       write(*,*)val	    ! print the value
     end program demo_rget

  Example program runs:

     $ demo_rget
	3.14159989

     $ demo_rget -val 10
	10.0000000

     $ demo_rget -val 3.000
	3.00000000


SEE ALSO
  M_kracken(3fm), kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse,dissect,store,setprompts,show

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		      rget(3m_kracken)
rgets(3m_kracken)					     rgets(3m_kracken)



NAME
  rgets(3f) - [ARGUMENTS:M_kracken] given keyword fetch real array from
  command arguments (LICENSE:PD)


SYNOPSIS
  function rgets(keyword,ier) result(rarray)

      character(len=*),intent(in)   :: keyword
      real,allocatable		    :: rarray(:)
      integer,optional,intent(iout) :: ier


DESCRIPTION
  The rgets(3f) function returns a dynamically allocated array of real values
  from a string that is the value for a command line option. It is part of the
  M_kracken(3fm) module.

  Values that cannot be read as a numeric value are returned as a NaN.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a list of
    REAL values.

RETURNS
  RARRAY
    real array returned by function.  The array will have zero size if the
    parsed dictionary entry is blank.

  IER
    If present and non-zero an error occurred in converting strings to a value

EXAMPLE
  Sample program converts between Celcius and Fahrenheit

     program demo_rgets
     use M_kracken, only: kracken, rgets
     implicit none
     real,allocatable  :: val(:)
     integer :: i
       ! define command arguments and parse user command
       call kracken('fc','-F -C' )

       ! get any values specified on -C option
       val=rgets('fc_C')
       ! test if have something to print in C ==> F table
       if(size(val).gt.0)then
	  ! print the requested values
	  write(*,'(a,t14,a)')'celsius','fahrenheit'
	  write(*,'(f5.1,t14,f5.1)')( val(i),(val(i)+40.0)*9.0/5.0 - 40.0,i=1,size(val))
       endif

       val=rgets('fc_F')
       ! check for values on -F
       if(size(val).gt.0)then
	  write(*,'(a,t14,a)') 'fahrenheit', 'celsius'
	  write(*,'(f5.1,t14,f5.1)')(val(i),(val(i)+40.0)*5.0/9.0 - 40.0,i=1,size(val))
       endif
     end program demo_rgets

  Example program runs:

     % demo_rgets -C -273.15 0 100 -40 37
     celsius	  fahrenheit
      -273.15	   -459.67
	 0.0	     32.0
       100.0	    212.0
       -40.0	    -40.0
	37.0	     98.6

     % demo_rgets -F -459.67 32 212 -40 98.6
     fahrenheit   celsius
      -459.67	   -273.15
	32.00	      0.00
       212.00	    100.00
       -40.00	    -40.00
	98.60	     37.00


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		     rgets(3m_kracken)
setprompts(3m_kracken)					setprompts(3m_kracken)



NAME
  setprompts(3f) - [ARGUMENTS:M_kracken] set explicit prompts for keywords in
  interactive mode (LICENSE:PD)


SYNOPSIS
  subroutine setprompts(verb,init)

     character(len=*),intent(in):: verb
     character(len=*),intent(in):: init


DESCRIPTION
  Optionally set prompts for interactive prompting mode.  The syntax of the
  call is the same as for KRACKEN(3f)/DISSECT(3f) except that prompt strings
  are given instead of default values. It is called before a call to
  KRACKEN(3f) or DISSECT(3f).

OPTIONS
  verb
    name to define prompts for

  string
    to define prompts instead of values

EXAMPLE
  Sample program:

      program demo_setprompts
      use M_kracken, only : kracken,iget,rget,sget,setprompts
      implicit none

      call setprompts('demo', ' -int My INTEGER value  -float My REAL value  -str My CHARACTER value')
      call kracken(   'demo', ' -int 100 -float 123.456 -str DEFAULT')
      write(*,'(a,i0)')'INTEGER IS ',iget('demo_int')
      write(*,'(a,g0)')'REAL IS ',rget('demo_float')
      write(*,'(a,a)')'STRING IS '//trim(sget('demo_str'))

      end program demo_setprompts

  Example execution and output:

	 $ demo_setprompts -?
	 demo parameters are
	 >   1)My CHARACTER value:[DEFAULT]
	     3)My INTEGER value:[100]
	     4)My REAL value:[123.456]
	 Enter parameter number to change("RETURN" to finish):


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		setprompts(3m_kracken)
sget(3m_kracken)					      sget(3m_kracken)



NAME
  sget(3f) - [ARGUMENTS:M_kracken] given keyword fetch string value and length
  from command arguments (LICENSE:PD)


SYNOPSIS
  function sget(name,ilen) result(string)

     character(len=*),intent(in)   :: name	  ! name to look up in dictionary
     integer,intent(out),optional  :: ilen	  ! length of returned output string
     character(len=:),allocatable  :: string	  ! returned value


DESCRIPTION
  The sget(3f) function returns a scalar character value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  name
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the second argument to the KRACKEN(3f) call.  This routine
    trusts that the desired name exists.

RETURNS
  string
    returned string. If LEN(STRING).EQ.0 an error occurred, such as NAME not
    being in the dictionary.

  ilen
    optional length of returned output string

EXAMPLE
  Sample program:

     program demo_sget
     use M_kracken, only: kracken, sget
     implicit none
     character(len=:),allocatable :: string, a, b
       ! define command arguments and parse user command
       call kracken('demo','-string This is the default -a A default -b B default' )
       ! get any values specified on command line for -truth
       string=sget('demo_string')
       a=sget('demo_a')
       b=sget('demo_b')
       write(*,'("string is ",a)')trim(string)
       write(*,'("a is ",a)')trim(a)
       write(*,'("b is ",a)')trim(b)
     end program demo_sget

  Example program runs:

     $demo_sget
     string is This is the default
     a is A default
     b is B default

     $ demo_sget -a A value for A -string new value for string -b BBBBBBB
     string is new value for string
     a is A value for A
     b is BBBBBBB

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		      sget(3m_kracken)
sgets(3m_kracken)					     sgets(3m_kracken)



NAME
  sgets(3f) - [ARGUMENTS:M_kracken] given keyword fetch string value parsed on
  whitespace into an array (LICENSE:PD)


SYNOPSIS
  function sgets(name,delim) result(strings)

     character(len=*),intent(in) :: name
     character(len=*),intent(in),optional :: delim
     character(len=:),allocatable :: strings(:)


DESCRIPTION
  The sgets(3f) function returns a dynamically allocated array of character
  values from a string that is the value for a command line option. It is part
  of the M_kracken(3fm) module.

OPTIONS
  name
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) or DISSECT(3f) call. The
    KEYWORD is a keyword from the second argument to the KRACKEN(3f) or
    DISSECT(3f) call.  This routine trusts that the desired name exists.  If
    the name does not exist the array [char(0)] is returned.  An array of zero
    size is returned if the string is blank.

  delim
    characters to split the string at into elements

RETURNS
  strings
    returned string array

EXAMPLE
  Sample program:

     program demo_sgets
     use M_kracken, only : kracken, sgets
     implicit none
     character(len=:),allocatable :: strings(:)
     integer :: i
	call kracken('cmd',' -string	This   is  a sentence ')
	strings= sgets("cmd_string")		! get -strings words
	print *, "string=",('['//trim(strings(i))//']',i=1,size(strings))
	print *, "len= ",len(strings)
	print *, "size=",size(strings)
     end program demo_sgets

  Example program execution:

     $ demo_sgets
      string=[This][is][a][sentence]
      len=	      8
      size=	      4

     $ demo_sgets -string a b c d e f g
      string=[a][b][c][d][e][f][g]
      len=	      1
      size=	      7


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		     sgets(3m_kracken)
show(3m_kracken)					      show(3m_kracken)



NAME
  show(3f) - [ARGUMENTS:M_kracken] dump dictionary entries (LICENSE:PD)


SYNOPSIS
  subroutine show(VERB_NAME0,VERBS_ONLY,IWIDE)

     character(len=*),intent(in)   :: VERB_NAME0
     logical,intent(in) 	   :: VERBS_ONLY
     integer,intent(in) 	   :: iwide


DESCRIPTION
  Write information about a command from the command dictionary or list all
  the command verbs in the dictionary

OPTIONS
  VERB_NAME0
    verb prefix to display. Default is all

  VERBS_ONLY
    flag to show verbs only

  IWIDE
    if .ge. zero, how many columns wide to show just verbs

EXAMPLE
  Sample program:

      program demo_show
      use M_kracken, only : kracken, show
      implicit none

      call kracken('demo', ' default keyword -i 10 -j 20.20 -value my default string')
      call show('demo',.false.,0)

      end program demo_show
  Results:

      demo_value	   = my default string
      demo_oo		   = default keyword
      demo_j		   = 20.20
      demo_i		   = 10
      demo_?		   = .false.
      demo_>		   = #N#


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		      show(3m_kracken)
store(3m_kracken)					     store(3m_kracken)



NAME
  store(3f) - [ARGUMENTS:M_kracken] add or replace value for specified name in
  dictionary(if allow='add' add name if needed) (LICENSE:PD)


SYNOPSIS
  subroutine store(name1,value1,allow1,ier)

     character(len=*),intent(in) :: name1
     class(*),intent(in)	 :: value1
     character(len=*),intent(in) :: allow1
     integer,intent(out)	 :: ier


DESCRIPTION
  Normally a command string and the associated values are placed in the
  dictionary by a call to KRACKEN(3f) when parsing a command line, or
  DISSECT(3f) and PARSE(3f) when creating input file interpreters. Rarely
  there may be a need to place <NAME,VALUE> pairs directly into the command
  dictionary, so this routine is public in the M_kracken(3fm) module. However,
  *this routine is primarily assumed to be an internal procedure*.

OPTIONS
  NAME1
    name in dictionary of form VERB_KEYWORD

  VALUE1
    value to be associated to NAME1. Value may be of type INTEGER, REAL,
    DOUBLEPRECISION, LOGICAL or CHARACTER.

  ALLOW1
    flag to allow new VERB_KEYWORD name being added. Should be

    'define'
      add or replace a new VERB_KEYWORD entry and value

    'add'
      add or append to a new VERB_KEYWORD entry and value

    'no_add' or 'append'
      append to an *EXISTING* entry value

    'replace'
      replace an *EXISTING* entry

  If 'add' or 'append' and the value is not blank it will be APPENDED to the
  current value. If 'define' or 'replace' it will replace the value instead of
  appending to it.

RETURNS
  IER
    flag if error occurs in adding or setting value

EXAMPLE
  Sample program:

     program demo_store
     use M_kracken, only : store, show
     implicit none
     integer :: ier
     ! The following should be equivalent to
     ! call kracken('MY',' &
     ! & -STRING My string value &
     ! & -INTEGER 1234 &
     ! & -INTEGER 0987654321 &
     ! & -REAL 1234.5678 &
     ! & -DOUBLE 123.4567d8 &
     ! & -LOGICAL T &
     ! & '
     call store('MY_STRING','My string value','add',ier)
     if(ier.ne.0)write(*,*)'ERROR: could not store MY_STRING ier=',ier
     ! now the verb MY is defined with the option -STRING so the
     ! dictionary has MY_STRING='My string value' defined

     ! this will be an error because MY does not have the -INTEGER
     ! keyword defined
     call store('MY_INTEGER',12345678,'no_add',ier)

     ! now define MY_INTEGER
     call store('MY_INTEGER',1234,'add',ier)
     ! if 'no_add' it will APPEND to current string
     call store('MY_INTEGER',987654321,'add',ier)

     call store('MY_REAL',1234.5678,'add',ier)
     call store('MY_DOUBLE',123.4567d8,'add',ier)
     call store('MY_LOGICAL',.true.,'add',ier)

     call show('MY',.false.,0)
     write(*,*)repeat('=',76)

     ! if 'replace' is used REPLACE instead of APPEND to current value
     call store('MY_INTEGER',987654321,'replace',ier)
     call show('MY',.false.,0)
     write(*,*)repeat('=',76)

     ! 'replace' can only replace an existing entry, not add one
     call store('MY_UNKNOWN',987654321,'replace',ier)
     call show('MY',.false.,0)
     write(*,*)repeat('=',76)

     end program demo_store

  Results:

     >########################################################
     >error: UNKNOWN OPTION -INTEGER
     >MY parameters are
     > -STRING My string value
     >########################################################
     > MY_STRING	    = My string value
     > MY_REAL		    = 1234.5677
     > MY_LOGICAL	    = T
     > MY_INTEGER	    = 1234 987654321
     > MY_DOUBLE	    = 12345670000.000000
     > =======================================================================
     > MY_STRING	    = My string value
     > MY_REAL		    = 1234.5677
     > MY_LOGICAL	    = T
     > MY_INTEGER	    = 987654321
     > MY_DOUBLE	    = 12345670000.000000
     > =======================================================================
     >########################################################
     >error: UNKNOWN OPTION -UNKNOWN
     >MY parameters are
     > -STRING My string value
     > -REAL 1234.5677
     > -LOGICAL T
     > -INTEGER 987654321
     > -DOUBLE 12345670000.000000
     >########################################################
     > MY_STRING	    = My string value
     > MY_REAL		    = 1234.5677
     > MY_LOGICAL	    = T
     > MY_INTEGER	    = 987654321
     > MY_DOUBLE	    = 12345670000.000000
     > =======================================================================


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		     store(3m_kracken)
igets(3m_kracken)					     igets(3m_kracken)



NAME
  igets(3f) - [ARGUMENTS:M_kracken] given keyword fetch integer array from
  command arguments (LICENSE:PD)


SYNOPSIS
  function igets(keyword,ier) result(iarray)

      character(len=*),intent(in)   :: keyword
      integer,allocatable	    :: iarray(:)
      integer,optional,intent(iout) :: ier


DESCRIPTION
  The igets(3f) function returns a dynamically allocated array of integers
  from a string that is the value for a command line option. It is part of the
  M_kracken(3fm) module.

  Values that cannot be read as an integer value are returned as a NaN.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a list of
    INTEGER values. Decimal values are allowed but truncated. Note that comma
    characters are ignored.

RETURNS
  IARRAY
    INTEGER array returned by function The array will have zero size if the
    parsed dictionary

  IER
    If present and non-zero an error occurred in converting strings to a value

EXAMPLE
  Sample program

     program demo_igets
     use M_kracken, only: kracken, igets
     implicit none
     doubleprecision,allocatable  :: vals(:)
     integer :: i
     ! define command arguments and parse user command
     call kracken('demo','-nums 1 2 3 100 1000 10000 100,000 11.11111 77.77777 -77.7777' )
     vals=igets('demo_nums') ! get any values specified for -nums
     write(*,'(*(g0:,","))')( vals(i),i=1,size(vals)) ! print the values
     end program demo_igets

  Example program runs:

     $ demo_igets
     1,2,3,100,1000,10000,100000,11,77,-77
     $ demo_igets -val 89,123,456 10.9999999
     89123456,10



SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		     igets(3m_kracken)
kracken(3m_kracken)					   kracken(3m_kracken)



NAME
  kracken(3f) - [ARGUMENTS:M_kracken] crack command line options on Fortran
  programs, using "-KEYWORD VALUE" syntax (LICENSE:PD)


SYNOPSIS
  subroutine kracken(verb, string[,ierror][style])

	 character(len=*), intent(in) ::  verb
	 character(len=*), intent(in) :: string
	 integer, intent(out), optional :: ierror
	 character(len=*), intent(in),optional :: style


DESCRIPTION
  This is the main public procedure in the M_kracken(3f) module.  It is used
  to define the command line options, their default values, and to crack the
  command line options using a syntax that looks very much like an execution
  of the program.

OPTIONS
  VERB
    arbitrary command name, usually 'cmd' or the name of the program calling
    the routine. This defines the variable prefix name used by the other
    functions to retrieve command option values.

  STRING
    prototype command to define keywords and defaults.	This string is simply
    a list of all keywords and their default values exactly as you would type
    them on the command line, with default values explicitly set.

  IERROR
    If an error occurs such as an unknown keyword the calling program will be
    stopped unless the optional parameter IERROR is present. If present, it is
    up to the calling program to decide what to do if a non-zero value is
    returned.

  STYLE
    parsing style. Either 'kracken' or 'args'. The default is 'kracken'.

EXAMPLE
  Sample program:

	program demo_kracken

	use M_kracken
	implicit none
	! define command arguments, default values and crack command line
	call kracken('cmd',		 &
	   &   '-int 20 		 &
	   &   -real 10e3		 &
	   &   -file input		 &
	   &   -dble 4.11223344556677d0  &
	   &   -help	.false. 	 &
	   &   -version .false. 	'&
	   &   )
	! that's it. You defined your command arguments and their default
	! values and parsed the user-supplied command line arguments.

	! Now you can just retrieve the values as strings using
	! names of the form VERB_SWITCHNAME anywhere in your program.
	! Note that the special name "VERB_oo"	is for the string
	! before any switch.
	   if(lget('cmd_help'))then ! was -help specified?
	      write(*,*)'The help text'
	      stop
	   endif
	   if(lget('cmd_version'))then ! was -version specified?
	      write(*,*)'version 1.0 20161030'
	      stop
	   endif
	   ! convert all the remaining options to scalar values
	   ! and call a procedure with the values
	   call mymain( 		 &
	   & sget('cmd_file'),		 &
	   & rget('cmd_real'),		 &
	   & dget('cmd_dble'),		 &
	   & iget('cmd_int')		 &
	   & )
	contains
	subroutine mymain(filename,value1,value2,ivalue3)
	! this routine is using conventional values and does
	! not use M_kracken(3fm) module at all
	implicit none
	character(len=*),intent(in) :: filename
	real,intent(in) 	    :: value1
	doubleprecision,intent(in)  :: value2
	integer,intent(in)	    :: ivalue3
	   ! just to show the command arguments have
	   ! been processed echo the values
	   print *, 'filename=',trim(filename)
	   print *, 'values=',value1,value2,ivalue3
	end subroutine mymain
	end program demo_kracken

  expected output from : "./cmd"

	   filename=input
	   values= 10000.0000  4.1122334455667700  20

  expected output from : "./cmd -file myfile -int 1234"

	   filename=myfile
	   values= 10000.0000  4.1122334455667700  1234


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		   kracken(3m_kracken)
lget(3m_kracken)					      lget(3m_kracken)



NAME
  lget(3f) - [ARGUMENTS:M_kracken] given keyword fetch logical value from
  command arguments (LICENSE:PD)


SYNOPSIS
  function lget(keyword) result(lval)

      character(len=*),intent(in)  :: keyword
      logical			   :: lval

DESCRIPTION
  The lget(3f) function returns a scalar logical value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  keyword
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the second argument to the KRACKEN(3f) call.

RETURNS
  lval
    logical value returned by function. The input value should be from the
    case-insensitive list of the words "true, false, t, f, yes, no, y, n,
    .false., .true., .f., .t.,''". .TRUE. is returned if the corresponding
    string in the dictionary for KEYWORD is blank.  .FALSE. is returned if a
    string not in the list is found.

EXAMPLE
  Sample program:

     program demo_lget
     use M_kracken, only: kracken, lget
     implicit none
     logical  :: val
       ! define command arguments and parse user command
       call kracken('demo','-truth .F.' )
       ! get any values specified on command line for -truth
       val=lget('demo_truth')
       write(*,'("The truth is ",l1)')val
     end program demo_lget

  Example program runs:

       $ demo_lget	       # uses the default
       The truth is F
       $ demo_lget -truth      # A BLANK VALUE IS TRUE
       The truth is T
       $ demo_lget -truth yes  # Y, yes, T, true, .T., .true. are all true
       The truth is T
       $ demo_lget -truth F    # N, no, F, false, .F., .FALSE. are all false
       The truth is F

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		      lget(3m_kracken)
dgets(3m_kracken)					     dgets(3m_kracken)



NAME
  dgets(3f) - [ARGUMENTS:M_kracken] given keyword fetch doubleprecision array
  from command arguments (LICENSE:PD)


SYNOPSIS
  function dgets(keyword,ier) result(darray)

      character(len=*),intent(in)   :: keyword
      doubleprecision,allocatable   :: DARRAY
      integer,optional,intent(iout) :: ier


DESCRIPTION
  The dgets(3f) function returns a dynamically allocated array of
  doubleprecision values from a string that is the value for a command line
  option. It is part of the M_kracken(3fm) module.

  Values that cannot be read as a numeric value are returned as a NaN.

OPTIONS
  keyword
    dictionary name to retrieve, of form VERB_NAME where VERB is taken from
    the first parameter of the call to KRACKEN(3f) or DISSECT(3f).

RETURNS
  darray
    double precision numeric array returned by function. The array will have
    zero size if the parsed dictionary entry is blank.

  IER
    If present and non-zero an error occurred in converting strings to a value

EXAMPLE
  Sample program

     program demo_dgets
     use M_kracken, only: kracken, dgets
     implicit none
     doubleprecision,allocatable  :: vals(:)
     integer :: i
     ! define command arguments and parse user command
     call kracken('demo','-nums 1 2 3 1000 100,000 11.11111 77.77777 -77.7777' )
     vals=dgets('demo_nums') ! get any values specified for -nums
     write(*,'(*(g0:,","))')( vals(i),i=1,size(vals)) ! print the values
     end program demo_dgets

  Example program runs:

     $ demo_dgets
      1.0000000000000000,2.0000000000000000,3.0000000000000000,
      1000.0000000000000,100000.00000000000,11.111110000000000,
      77.777770000000004,-77.777699999999996

     $ demo_dgets -nums 89,123,456.789 10.9999999
      89123456.789000005,10.999999900000001


SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				April 16, 2023		     dgets(3m_kracken)
+ echo '>>>> run make'
>>>> run make
+ cd ..
+ make clean
rm -f ../example/demo_M_kracken  M_kracken.o  *.mod ../test/test_suite_M_kracken 
+ make F90=gfortran gfortran
gfortran -g -O -Wall -std=f2018 -Wextra -Wno-maybe-uninitialized -Wno-uninitialized -finit-local-zero -c M_kracken.f90
M_kracken.f90:5:5:

    5 | use M_framework__verify,   only: debug, io_debug
      |     1
Fatal Error: Cannot open module file ‘m_framework__verify.mod’ for reading at (1): No such file or directory
compilation terminated.
make: *** [Makefile:120: M_kracken.o] Error 1
+ make doxygen
doxygen dox.in
warning: Tag 'PERL_PATH' at line 2140 of file 'dox.in' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using "doxygen -u"
warning: Tag 'MSCGEN_PATH' at line 2162 of file 'dox.in' has become obsolete.
         To avoid this warning please remove this line from your configuration file or upgrade it using "doxygen -u"
warning: source html/images is not a readable file or directory... skipping.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18033: warning: documented symbol 'm_kracken::character' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18034: warning: documented symbol 'm_kracken::character' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18035: warning: documented symbol 'm_kracken::integer' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18036: warning: documented symbol 'm_kracken::integer' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18038: warning: documented symbol 'm_kracken::character' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18039: warning: documented symbol 'm_kracken::character' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18046: warning: documented symbol 'm_kracken::character' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18047: warning: documented symbol 'm_kracken::character' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18206: warning: documented symbol 'm_kracken::real' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18554: warning: documented symbol 'm_kracken::character' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18650: warning: documented symbol 'm_kracken::real' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18757: warning: documented symbol 'integer function m_kracken::dimension' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18871: warning: documented symbol 'real function m_kracken::dimension' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:18959: warning: documented symbol 'logical function m_kracken::dimension' was not declared or defined.
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:19075: warning: documented symbol 'm_kracken::character' was not declared or defined.
Searching for include files...
Searching for example files...
Searching for images...
Searching for files in directory /home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/images
Searching for dot files...
Searching for msc files...
Searching for dia files...
Searching for files to exclude
Searching INPUT for files to process...
Searching for files in directory /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src
Searching for files in directory /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source
Searching for files in directory /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/doc
Searching for files in directory /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/doc/PRIVATE
Searching for files in directory /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp
Reading and parsing tag files
Parsing files
Reading /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/M_kracken.f90...
Parsing file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/M_kracken.f90...
Preprocessing /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/mainpage.txt...
Parsing file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/mainpage.txt...
Reading /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90...
Parsing file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90...
Reading /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/krackentest2.f90...
Parsing file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/krackentest2.f90...
Building group list...
Building directory list...
Building namespace list...
Building file list...
Building class list...
Computing nesting relations for classes...
Associating documentation with classes...
Building example list...
Searching for enumerations...
Searching for documented typedefs...
Searching for members imported via using declarations...
Searching for included using directives...
Searching for documented variables...
Building interface member list...
Building member list...
Searching for friends...
Searching for documented defines...
Computing class inheritance relations...
Computing class usage relations...
Flushing cached template relations that have become invalid...
Computing class relations...
Add enum values to enums...
Searching for member function documentation...
Creating members for template instances...
Building page list...
Search for main page...
Computing page relations...
Determining the scope of groups...
Sorting lists...
Determining which enums are documented
Computing member relations...
Building full member lists recursively...
Adding members to member groups.
Computing member references...
Inheriting documentation...
Generating disk names...
Adding source references...
Adding xrefitems...
Sorting member lists...
Setting anonymous enum type...
Computing dependencies between directories...
Generating citations page...
Counting members...
Counting data structures...
Resolving user defined references...
Finding anchors and sections in the documentation...
Transferring function references...
Combining using relations...
Adding members to index pages...
Correcting members for VHDL...
Generating style sheet...
Generating search indices...
Generating example documentation...
Generating file sources...
Parsing code for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/M_kracken.f90...
Parsing code for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/mainpage.txt...
Parsing code for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90...
Parsing code for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/krackentest2.f90...
Generating file documentation...
Generating docs for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/M_kracken.f90...
Generating call graph for function ifnull
Generating caller graph for function ifnull
Generating docs for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/mainpage.txt...
Generating docs for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90...
Generating call graph for function help_version
Generating caller graph for /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:20462: warning: explicit link request to 'N' could not be resolved
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:20518: warning: explicit link request to 'N' could not be resolved
function help_version
Generating call graph for function ifnull
Generating call graph for function krackentest2
Generating call graph for function next
Generating caller graph for function next
Generating call graph for function now_ex
Generating caller graph for function print_generic
Generating call graph for function uncorrected_week_of_year
Generating caller graph for function uncorrected_week_of_year
Generating docs for file /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/krackentest2.f90...
Generating call graph for function help_version
Generating call graph for function krackentest2
Generating page documentation...
Generating group documentation...
Generating class documentation...
Generating namespace index...
Generating docs for namespace m_journal
Generating call graph for function m_journal::flush_trail
Generating caller graph for function m_journal::where_write_message
Generating call graph for function m_journal::where_write_message_all
Generating call graph for function m_journal::write_message_only
Generating docs for compound m_journal::journal...
Generating docs for compound m_journal::now_ex...
Generating docs for namespace m_kracken
Generating call graph for function m_kracken::cmd_args_to_dictionary
Generating caller graph for function m_kracken::cmd_args_to_dictionary
Generating call graph for function m_kracken::dget
Generating caller graph for function m_kracken::dget
Generating call graph for function m_kracken::dgets
Generating caller graph for function m_kracken::dgets
Generating call graph for function m_kracken::dissect
Generating caller graph for function m_kracken::dissect
Generating call graph for function m_kracken::iget
Generating caller graph for function m_kracken::iget
Generating call graph for function m_kracken::igets
Generating caller graph for function m_kracken::igets
Generating caller graph for function m_kracken::initd
Generating call graph for function m_kracken::kracken
Generating caller graph for function m_kracken::kracken
Generating call graph for function m_kracken::lget
Generating caller graph for function m_kracken::lget
Generating call graph for function m_kracken::lgets
Generating caller graph for function m_kracken::lgets
Generating call graph for function m_kracken::menu
Generating caller graph for function m_kracken::menu
Generating call graph for function m_kracken::parse
Generating caller graph for function m_kracken::parse
Generating caller graph for function m_kracken::print_kracken_dictionary
Generating call graph for function m_kracken::retrev
Generating caller graph for function m_kracken::retrev
Generating call graph for function m_kracken::rget
Generating caller graph for function m_kracken::rget
Generating call graph for function m_kracken::rgets
Generating caller graph for function m_kracken::rgets
Generating call graph for function m_kracken::setprompts
Generating caller graph for function m_kracken::setprompts
Generating call graph for function m_kracken::sget
Generating caller graph for function m_kracken::sget
Generating call graph for function m_kracken::sgets
Generating caller graph for function m_kracken::sgets
Generating call graph for function m_kracken::show
Generating caller graph for function m_kracken::show
Generating call graph for function m_kracken::store
Generating caller graph for function m_kracken::store
Generating caller graph for function m_kracken::subscript_
Generating docs for namespace m_list
Generating call graph for function m_list::dict_add
Generating docs for compound m_list::dictionary...
Generating docs for compound m_list::insert...
Generating docs for compound m_list::locate...
Generating docs for compound m_list::remove...
Generating docs for compound m_list::replace...
Generating docs for namespace m_msg
Generating call graph for function m_msg::msg_one
Generating call graph for function m_msg::msg_scalar
Generating caller graph for function m_msg::stderr
Generating call graph for function m_msg::wrt
Generating docs for compound m_msg::str...
Generating docs for namespace m_strings
Generating call graph for fun/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:7384: warning: The following parameter of m_strings::adjustc(character(len= *), intent(in) string, integer, intent(in), optional length) is not documented:
  parameter 'length'
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:4534: warning: explicit link request to 'N' could not be resolved
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:4578: warning: explicit link request to 'N' could not be resolved
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:4595: warning: explicit link request to 'N' could not be resolved
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:10345: warning: Found unknown command '\ABCDEFG'
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:10283: warning: Found unknown command '\ABCDEF'
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:8044: warning: Found unknown command '\ABCDEFGHIJKLMNOPQRSTUVWXYZ'
/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:8055: warning: Found unknown command '\ABCDEFGHIJKLMNOPQRSTUVWXYZ'
ction m_strings::a2d
Generating caller graph for function m_strings::a2d
Generating call graph for function m_strings::a2i
Generating call graph for function m_strings::a2r
Generating caller graph for function m_strings::atleast
Generating call graph for function m_strings::base
Generating caller graph for function m_strings::base
Generating call graph for function m_strings::base2_c
Generating call graph for function m_strings::change
Generating caller graph for function m_strings::codebase
Generating call graph for function m_strings::compact
Generating caller graph for function m_strings::compact
Generating call graph for function m_strings::crack_cmd
Generating caller graph for function m_strings::crack_cmd
Generating call graph for function m_strings::crop
Generating call graph for function m_strings::d2s
Generating call graph for function m_strings::dble_s2v
Generating call graph for function m_strings::dbles_s2v
Generating call graph for function m_strings::decodebase
Generating caller graph for function m_strings::decodebase
Generating caller graph for function m_strings::delim
Generating call graph for function m_strings::dilate
Generating caller graph for function m_strings::dilate
Generating call graph for function m_strings::ends_with_any
Generating caller graph for function m_strings::ends_with_str
Generating call graph for function m_strings::fmt
Generating caller graph for function m_strings::fmt
Generating call graph for function m_strings::fortran_name
Generating call graph for function m_strings::getvals
Generating call graph for function m_strings::i2s
Generating call graph for function m_strings::int_s2v
Generating call graph for function m_strings::ints_s2v
Generating caller graph for function m_strings::isdigit
Generating call graph for function m_strings::isnumber
Generating caller graph for function m_strings::isspace
Generating call graph for function m_strings::join
Generating call graph for function m_strings::l2s
Generating caller graph for function m_strings::lenset
Generating caller graph for function m_strings::lower
Generating call graph for function m_strings::merge_str
Generating caller graph for function m_strings::merge_str
Generating call graph for function m_strings::msg_one
Generating call graph for function m_strings::msg_scalar
Generating caller graph for function m_strings::noesc
Generating call graph for function m_strings::nospace
Generating caller graph for function m_strings::nospace
Generating caller graph for function m_strings::notabs
Generating call graph for function m_strings::quote
Generating caller graph for function m_strings::quote
Generating call graph for function m_strings::r2s
Generating call graph for function m_strings::real_s2v
Generating call graph for function m_strings::reals_s2v
Generating call graph for function m_strings::replace
Generating caller graph for function m_strings::replace
Generating caller graph for function m_strings::reverse
Generating call graph for function m_strings::s2v
Generating caller graph for function m_strings::s2v
Generating call graph for function m_strings::s2vs
Generating call graph for function m_strings::sep
Generating caller graph for function m_strings::sep
Generating call graph for function m_strings::split
Generating caller graph for function m_strings::split
Generating caller graph for function m_strings::split_tokens
Generating call graph for function m_strings::stretch
Generating call graph for function m_strings::string_tokens
Generating caller graph for function m_strings::strtok
Generating caller graph for function m_strings::substitute
Generating call graph for function m_strings::tobase
Generating call graph for function m_strings::todecimal
Generating caller graph for function m_strings::transliterate
Generating caller graph for function m_strings::trimzeros_
Generating call graph for function m_strings::unquote
Generating caller graph for function m_strings::unquote
Generating caller graph for function m_strings::upper
Generating call graph for function m_strings::v2s_bug
Generating call graph for function m_/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/tmp/_tmp.f90:12768: warning: The following parameters of m_time::date_to_julian(integer, dimension(8), intent(in) dat, real(kind=realtime), intent(out) julian, integer, intent(out) ierr) are not documented:
  parameter 'julian'
  parameter 'ierr'
strings::value_to_string
Generating caller graph for function m_strings::value_to_string
Generating docs for compound m_strings::dble...
Generating docs for compound m_strings::ends_with...
Generating docs for compound m_strings::int...
Generating docs for compound m_strings::matchw...
Generating docs for compound m_strings::msg...
Generating docs for compound m_strings::real...
Generating docs for compound m_strings::split2020...
Generating docs for compound m_strings::string_to_value...
Generating docs for compound m_strings::switch...
Generating docs for compound m_strings::v2s...
Generating docs for namespace m_time
Generating call graph for function m_time::box_month
Generating caller graph for function m_time::call_sleep
Generating caller graph for function m_time::call_usleep
Generating call graph for function m_time::d2j
Generating caller graph for function m_time::d2j
Generating call graph for function m_time::d2o
Generating caller graph for function m_time::d2o
Generating call graph for function m_time::d2u
Generating caller graph for function m_time::d2u
Generating call graph for function m_time::d2w
Generating caller graph for function m_time::d2w
Generating caller graph for function m_time::date_to_julian
Generating call graph for function m_time::date_to_unix
Generating caller graph for function m_time::date_to_unix
Generating call graph for function m_time::days2sec
Generating call graph for function m_time::dow
Generating caller graph for function m_time::dow
Generating caller graph for function m_time::easter
Generating call graph for function m_time::fmtdate
Generating caller graph for function m_time::fmtdate
Generating call graph for function m_time::fmtdate_usage
Generating caller graph for function m_time::get_timezone
Generating call graph for function m_time::j2d
Generating caller graph for function m_time::j2d
Generating call graph for function m_time::julian_to_date
Generating caller graph for function m_time::julian_to_date
Generating call graph for function m_time::mo2d
Generating caller graph for function m_time::mo2v
Generating call graph for function m_time::moon_fullness
Generating caller graph for function m_time::moon_fullness
Generating call graph for function m_time::now
Generating caller graph for function m_time::now
Generating call graph for function m_time::o2d
Generating caller graph for function m_time::o2d
Generating call graph for function m_time::ordinal_seconds
Generating call graph for function m_time::ordinal_to_date
Generating call graph for function m_time::phase_of_moon
Generating caller graph for function m_time::phase_of_moon
Generating call graph for function m_time::sec2days
Generating call graph for function m_time::system_sleep
Generating call graph for function m_time::u2d
Generating caller graph for function m_time::u2d
Generating call graph for function m_time::unix_to_date
Generating caller graph for function m_time::unix_to_date
Generating caller graph for function m_time::v2mo
Generating call graph for function m_time::w2d
Generating docs for namespace m_verify
Generating caller graph for function m_verify::accdig
Generating call graph for function m_verify::almost
Generating caller graph for function m_verify::anyscalar_to_double
Generating caller graph for function m_verify::anyscalar_to_real128
Generating call graph for function m_verify::assert
Generating caller graph for function m_verify::atleast
Generating call graph for function m_verify::dp_accdig
Generating caller graph for function m_verify::dp_accdig
Generating call graph for function m_verify::fstop
Generating caller graph for function m_verify::fstop
Generating call graph for function m_verify::in_margin
Generating caller graph for function m_verify::julian
Generating caller graph for function m_verify::stderr
Generating call graph for function m_verify::unit_check
Generating caller graph for function m_verify::unit_check
Generating call graph for function m_verify::unit_check_bad
Generating call graph for function m_verify::unit_check_done
Generating caller graph for function m_verify::unit_check_done
Generating call graph for function m_verify::unit_check_good
Generating call graph for function m_verify::unit_check_msg
Generating call graph for function m_verify::unit_check_start
Generating graph info page...
Generating directory documentation...
Generating index page...
Generating page index...
Generating module index...
Generating namespace index...
Generating namespace member index...
Generating annotated compound index...
Generating alphabetical compound index...
Generating hierarchical class index...
Generating graphical class hierarchy...
Generating member index...
Generating file index...
Generating file member index...
Generating example index...
finalizing index lists...
writing tag file...
Running plantuml with JAVA...
Running dot...
lookup cache used 432/65536 hits=871 misses=451
finished...
+ make man
mandb: warning: $MANPATH set, inserting /etc/manpath.config
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man1'. Wait...
Purging old database entries in /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man1/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man3'. Wait...
mandb: warning: failed to store entry for sgets(3m_kracken)
mandb: warning: failed to store entry for setprompts(3m_kracken)
mandb: warning: failed to store entry for iget(3m_kracken)
mandb: warning: failed to store entry for rget(3m_kracken)
mandb: warning: failed to store entry for M_kracken(3m_kracken)
mandb: warning: failed to store entry for lgets(3m_kracken)
mandb: warning: failed to store entry for kracken(3m_kracken)
mandb: warning: failed to store entry for dissect(3m_kracken)
mandb: warning: failed to store entry for lget(3m_kracken)
mandb: warning: failed to store entry for retrev(3m_kracken)
mandb: warning: failed to store entry for dget(3m_kracken)
mandb: warning: failed to store entry for parse(3m_kracken)
mandb: warning: failed to store entry for sget(3m_kracken)
mandb: warning: failed to store entry for show(3m_kracken)
mandb: warning: failed to store entry for igets(3m_kracken)
mandb: warning: failed to store entry for dgets(3m_kracken)
mandb: warning: failed to store entry for rgets(3m_kracken)
mandb: warning: failed to store entry for store(3m_kracken)
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man2'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man2/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man4'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man4/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man6'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man6/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man7'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man7/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man8'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man8/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man5'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/man5/M_kracken.3m_kracken: ignoring bogus filename
done.
Checking for stray cats under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat8...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat1...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat3...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat4...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat6...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat2...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat5...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/../man/cat7...
8 man subdirectories contained newer manual pages.
18 manual pages were added.
0 stray cats were added.
0 old database entries were purged.
ARGUMENTS (3)	     - [ARGUMENTS::INTRO] collection of command line argument parsers
dget(3f) (3m_kracken) [dget] - (unknown subject)
dgets(3f) (3m_kracken) [dgets] - (unknown subject)
dissect(3f) (3m_kracken) [dissect] - (unknown subject)
iget(3f) (3m_kracken) [iget] - (unknown subject)
igets(3f) (3m_kracken) [igets] - (unknown subject)
kracken(3f) (3m_kracken) [kracken] - (unknown subject)
lget(3f) (3m_kracken) [lgets] - (unknown subject)
M_kracken(3fm) (3m_kracken) [M_kracken] - (unknown subject)
parse(3f) (3m_kracken) [parse] - (unknown subject)
RETREV(3f) (3m_kracken) [retrev] - (unknown subject)
rget(3f) (3m_kracken) [rget] - (unknown subject)
rgets(3f) (3m_kracken) [rgets] - (unknown subject)
setprompts(3f) (3m_kracken) [setprompts] - (unknown subject)
sget(3f) (3m_kracken) [sget] - (unknown subject)
sgets(3f) (3m_kracken) [sgets] - (unknown subject)
show(3f) (3m_kracken) [show] - (unknown subject)
store(3f) (3m_kracken) [store] - (unknown subject)

gzip: stdout: Permission denied

gzip: stdout: Permission denied

gzip: stdout: Permission denied

gzip: stdout: Permission denied
ARGUMENTS.3.man(3m_kracken)			   ARGUMENTS.3.man(3m_kracken)

NAME
  ARGUMENTS(3f) - [ARGUMENTS::INTRO] collection of command line argument
  parsers

SYNOPSIS
  <h3>SPECIAL-PURPOSE PUBLIC ROUTINES:</h3>

     use M_kracken
     use M_kracken,  only : kracken
     use M_kracken,  only : rget,dget,iget,lget,sget,retrev
     use M_krackens, only : rgets,dgets,igets,lgets,sgets
     use M_kracken,  only : print_kracken_dictionary
     use M_kracken,  only : cmd_args_to_dictionary, unnamed
     use M_getopt
     use M_getopt_long

DESCRIPTION
  The following command line argument parser modules are available:

  •  M_kracken parse command line options of Fortran programs using Unix-like
     syntax (LICENSE:PD)

  •  M_getopt parse command line arguments. Similar to those in standard C
     library.  (LICENSE:GPL)

  •  M_getopt_long parse command line options like Sun getopt_long, including
     the Sun CLIP specification (LICENSE:PD)

  •  M_args parse commands using NAMELIST format or Unix-like syntax and
     produce a NAMELIST string to allow argument parsing without having to
     convert strings to various variable types (LICENSE:PD)

M_KRACKEN
  M_kracken(3f) is a module to parse command line options of Fortran programs
  using Unix-like syntax.  The main differences in syntax are that negative
  values and multi-word values rarely need quotes around them, and that the
  "unnamed" parameter is first on the command line. It contains:

   BASE ROUTINES
  kracken
    - crack command line options on Fortran programs, using "-KEYWORD VALUE"
    syntax

  retrev
    - get keyword value as a string from a command's argument list

   CONVENIENCE ROUTINES FOR FETCHING VALUES
  dget
    - given keyword fetch doubleprecision value from command argument

  iget
    - given keyword fetch integer value from command argument

  lget
    - given keyword fetch logical value from command arguments

  rget
    - given keyword fetch real value from command argument

  sget
    - given keyword fetch string value and length from command arguments

  dgets
    - given keyword fetch doubleprecision array from command arguments

  igets
    - given keyword fetch integer array from command arguments

  lgets
    - given keyword fetch logical array from command argument

  rgets
    - given keyword fetch real array from command arguments

  sgets
    - given keyword fetch string value parsed on whitespace into an array

   AUXILIARY COMMAND FOR SETTING PROMPTS
  setprompts
    - set explicit prompts for keywords in interactive mode

   AUXILIARY COMMANDS FOR USE IN BUILDING CLI
  (CLI) Command Line Interface routines can be used to read shell-like input
  and configuration files

  dissect
    - convenient call to parse() - define defaults, then process

  parse
    - parse user command and store tokens into Language Dictionary

  show
    - dump dictionary entries

  store
    - replace dictionary name's value (if allow=add add name if necessary)

				April 16, 2023	   ARGUMENTS.3.man(3m_kracken)
dget(3m_kracken)					      dget(3m_kracken)

NAME
  dget(3f) - [ARGUMENTS:M_kracken] given keyword fetch doubleprecision value
  from command argument (LICENSE:PD)

SYNOPSIS
  function dget(keyword) result(value)

      character(len=*),intent(in)  :: keyword
      doubleprecision		   :: value

DESCRIPTION
  The dget(3f) function returns a scalar doubleprecision value from a command
  line argument using the M_kracken(3fm) module.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a
    doubleprecision value.

RETURNS
  VALUE
    doubleprecision value returned by function

EXAMPLE
  Sample program

     program demo_dget
     use M_kracken, only: kracken, dget
     implicit none
     doubleprecision :: val
       ! define command arguments and parse user command
       call kracken('demo','-val 3.1416' )
       val=dget('demo_val') ! get any values specified on -va
gzip: stdout: Permission denied
troff: <standard input>:537: warning [p 7, 4.3i]: can't break line
troff: <standard input>:539: warning [p 7, 4.7i]: can't break line
troff: <standard input>:541: warning [p 7, 5.0i]: can't break line
troff: <standard input>:543: warning [p 7, 5.3i]: can't break line
troff: <standard input>:545: warning [p 7, 5.7i]: can't break line
troff: <standard input>:547: warning [p 7, 6.0i]: can't break line
troff: <standard input>:549: warning [p 7, 6.3i]: can't break line
troff: <standard input>:551: warning [p 7, 6.7i]: can't break line
troff: <standard input>:554: warning [p 7, 7.0i]: can't break line
troff: <standard input>:557: warning [p 7, 7.3i]: can't break line
troff: <standard input>:559: warning [p 7, 7.7i]: can't break line
troff: <standard input>:561: warning [p 7, 8.0i]: can't break line
troff: <standard input>:563: warning [p 7, 8.3i]: can't break line
troff: <standard input>:565: warning [p 7, 8.7i]: can't break line
troff: <standard input>:567: warning [p 7, 9.0i]: can't break line
troff: <standard input>:569: warning [p 7, 9.3i]: can't break line
troff: <standard input>:571: warning [p 7, 9.7i]: can't break line
troff: <standard input>:573: warning [p 7, 10.0i]: can't break line
troff: <standard input>:575: warning [p 7, 10.3i]: can't break line
troff: <standard input>:577: warning [p 7, 10.7i]: can't break line
troff: <standard input>:579: warning [p 8, 0.0i]: can't break line
troff: <standard input>:581: warning [p 8, 0.3i]: can't break line
troff: <standard input>:583: warning [p 8, 0.7i]: can't break line
troff: <standard input>:585: warning [p 8, 1.0i]: can't break line
l option
       write(*,*)val	     ! print the value
     end program demo_dget

  Example program runs:

     $ demo_dget
	3.14159989

     $ demo_dget -val 10
	10.0000000

     $ demo_dget -val 3.000
	3.00000000

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		      dget(3m_kracken)
dissect(3m_kracken)					   dissect(3m_kracken)

NAME
  dissect(3f) - [ARGUMENTS:M_kracken] convenient call to parse() -- define
  defaults, then process (LICENSE:PD)

SYNOPSIS
  subroutine dissect(verb,init,pars,error_return)

     character(len=*),intent(in)  :: verb
     character(len=*),intent(in)  :: init
     character(len=*),intent(in)  :: pars
     integer,intent(out),optional :: error_return

DESCRIPTION
OPTIONS
  VERB
    the name of the command to be reset/defined

  INIT
    used to define command options; usually hard-set in the program.

  PARS
    defines the command options to be set, usually from user input

RETURNS
  ERROR_RETURN
    error code. If zero no error occurred.

EXAMPLE
  Sample program:

      program demo_dissect
      use M_kracken, only : kracken,iget,rget,sget,dissect
      implicit none
      integer :: ierr

      call dissect('demo',' -int 1000 -float 1234.567 -str CHARACTER value','-int 456 -float 50.00 ',ierr)
      write(*,'(a,i0)')'INTEGER IS ',iget('demo_int')
      write(*,'(a,g0)')'REAL IS ',rget('demo_float')
      write(*,'(a,a)')'STRING IS '//trim(sget('demo_str'))

      end program demo_dissect

  Results:

     INTEGER IS 456
     REAL IS 50.0000000
     STRING IS CHARACTER value

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		   dissect(3m_kracken)
iget(3m_kracken)					      iget(3m_kracken)

NAME
  iget(3f) - [ARGUMENTS:M_kracken] given keyword fetch integer value from
  command argument (LICENSE:PD)

SYNOPSIS
  function iget(keyword) result(value)

      character(len=*),intent(in)  :: keyword
      integer		   :: value

DESCRIPTION
  The iget(3f) function returns a scalar integer value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a integer
    value.

RETURNS
  VALUE
    integer value returned by function

EXAMPLE
  Sample program

     program demo_iget
     use M_kracken, only: kracken, iget
     implicit none
     integer :: val
       ! define command arguments and parse user command
       call kracken('demo','-val 31416' )
       val=iget('demo_val') ! get any values specified on -val option
       write(*,*)val	    ! print the value
     end program demo_iget

  Example program runs:

     $ demo_iget
	31416

     $ demo_iget -val 10
	10

     $ demo_iget -val 3.000
	3

SEE ALSO
  M_kracken(3fm), kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		      iget(3m_kracken)
lgets(3m_kracken)					     lgets(3m_kracken)

NAME
  lget(3f) - [ARGUMENTS:M_kracken] given keyword fetch logical array from
  command argument (LICENSE:PD)

SYNOPSIS
  function lgets(keyword) result(lvals)

      character(len=*),intent(in)  :: keyword
      logical,allocatable	   :: lvals(:)

DESCRIPTION
  The lgets(3f) function returns a dynamically allocated array of logical
  values from a string that is the value for a command line option. It is part
  of the M_kracken(3fm) module.

  Values that cannot be read as a logical value are returned as a ".FALSE.".

OPTIONS
  keyword
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the second argument to the KRACKEN(3f) call.

RETURNS
  lvals
    logical array returned by function. The input value should be from the
    case-insensitive list of the wor
gzip: ds "true, false, t, f, yes, no, y, n,
    .false., .true., .f., .t".

EXAMPLE
  Sample program:

     program demo_lgets
     use M_kracken, only: kracken, lgets
     implicit none
     logical,allocatable  :: vals(:)
       ! define command arguments and parse user command
       call kracken('demo','-truths .F. .T. .F. .F. .T. .T.' )
       ! get any values specified on command line for -truth
       vals=lgets('demo_truths')
       write(*,*)vals
     end program demo_lgets

  Example program runs:

     $ demo_lgets

   F T F F T T
  $ demo_lgets -truths false F .f. no true .true. stdout: Permission denied
t T Yes No

   F F F F T T T T T T F
SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		     lgets(3m_kracken)
untitled()							    untitled()

	      [1][GPF Home Page]

       KRACKEN(3F): The Fortran Command Line Argument Cracker (Extended
       Version)

	  This version is dependent upon Fortran 2008 features and other GPF
	  (General Purpose Fortran) modules. See the simpler [2]Fortran 2003 and
	  FORTRAN 77 versions if you are looking for older stable versions that
	  do not require other CLI (Command Line Interface) modules from the GPF
	  collection.
	    * [3]Abstract
	    * [4]Example of typical use
	    * [5]Routine Descriptions
	    * [6]Using the interactive menu mode of prompting
	    * [7]Usage notes
	    * [8]Alternate parsing of the command line arguments

	  To get a demonstration program and the source for the M_kracken module
	  download the [9]source files for the module, other modules it is
	  dependent on, and many example programs that call KRACKEN(3f).

NAME
  M_kracken(3fm) - [ARGUMENTS:M_kracken] parse command line options of Fortran
  programs using Unix-like syntax (LICENSE:PD)

ABSTRACT
  KRACKEN(3f) is a Fortran command line argument parser designed to provide
  for easy entry of lists of negative numbers, strings, and exponential
  numbers without generally requiring quotes on the command line. It provides:

    •  a standard Unix-like style for parsing arguments and keywords

    •  a clear way to specify allowable keywords and default values

    •  simple access to the parsed data from procedures

    •  easy conversion from strings to numbers

    •  easy conversion from strings to arrays

    •  a simple menu-driven interactive mode for modifying parameters

  You can call your command like this: mycode -r 333.333 -file /home/testin -l
  -i 300

     with very little code:

  Example Usage

  program myprogram

     use M_kracken
     character(255) filename
     logical lval
     !	define command arguments, default values and crack command line
     call kracken('cmd','-i 10 -r 10e3 -d 4.1123344d0 -l .false. -file input')
     !	get values
     call retrev('cmd_f',filename,iflen,ier) ! get -f FILENAME
     lval = lget('cmd_l')		     ! get -l present?
     rval = rget('cmd_r')		     ! get -r RVAL
     dval = dget('cmd_d')		     ! get -d DBLEVAL
     ival = iget('cmd_i')		     ! get -i IVAL
     !	all done parsing; do something with the values
     print *, "filename=",filename(:iflen)
     print *, " i=",ival, " r=",rval, " l=",lval, "d=",dval
  end program myprogram

     See the documentation for the procedures for detailed descriptions.
     Each procedure description includes a working example program.

  The Routines

       [10]kracken define command options and defaults and parse command
  line

       [11]retrev get value for a keyword as a string

  The returned strings obtained by calls to RETREV(3f) can be converted to
  numeric values using procedures from the M_strings(3fm) module such as
  STRING_TO_VALUE(3F), which converts strings to a numeric value, and
  SPLIT(3F), which can break a string into a list of words. But more commonly,
  the following convenience routines are used ...

    There are scalar convenience functions for getting simple values that are
    used in most cases as an alternative to RETREV(3f) that convert the values
    directly to common scalar types: lval=[12]lget(VERB_ARGNAME) !gets a
    "logical" value.  rval=[13]rget(VERB_ARGNAME) !gets a "real" value.
    dval=[14]dget(VERB_ARGNAME) !gets a "doubleprecision" value.
    ival=[15]iget(VERB_ARGNAME) !gets a "integer" value
    sval=[16]sget(VERB_ARGNAME) !gets a "character" value

    There are also convenience routines for returning arrays of scalar values
    that typically use allocatable arrays. Just add 's' to the end of the
    scalar convenience functions.  lvals=[17]lgets(VERB_ARGNAME) !gets a
    "logical" array.  rvals=[18]rgets(VERB_ARGNAME) !gets a "real" array.
    dvals=[19]dgets(VERB_ARGNAME) !gets a "doubleprecision" array.
    ivals=[20]igets(VERB_ARGNAME) !gets a "integer" array
    svals=[21]sgets(VERB_ARGNAME) !gets a "character" array

  SPECIAL-PURPOSE PUBLIC ROUTINES:

      Setting command prompts

    public :: setprompts
      ! define prompts for commands in interactive mode

	Only needed for parsing input files, not cracking command line arguments

    [22]dissect
      ! for user-defined commands: define defaults, then process user input

    [23]parse
      ! parse user command and store tokens into Language Dictionary

    [24]store
      ! replace dictionary name's value (if allow=add add name if nece ssary)

    [25]show
      ! display dictionary contents for information

	length of verbs and entries in Language dictionary

    NOTE: many parameters may be reduced in size so as to just accommodate
    being used as a command line parser. In particular, some might want to
    change:

    logical,public
      :: stop_command=.false. ! indication to return stop _command as false in
      interactive mode

    integer, parameter,public :: IPvalue=4096*16
      ! length of keyword value

    integer, parameter,public :: IPverb=20
      ! length of verb

    character(len=1),save,public
      :: kracken_comment='#'

    character(len=:),allocatable,public
      :: leftover		  ! remaining command(s) on line

    integer,public,save
      :: current_command_length=0 ! length of options for current command

  Interactive menu mode

     The menu mode feature is in a state of flux and may change
     significantly ...

     All commands automatically have the parameter "-?". If it is present, a
     menu appears after any specified options have been applied that allows
     for changing parameters interactively.

     The default prompts are the keywords themselves and their current
     values. To set your own prompts call SETPROMPTS(3f):
     call setprompts(verb_name,options_and_prompts)

     where the special prompt string "#N#" means to not allow prompting for
     this parameter. For example:
       ! set prompts for interactive mode ...
       call setprompts('copy',' 			  &
       & -oo "#N#"					  &
       & -i Enter input file name			  &
       & -o Enter output file name			  &
       & -version "#N#" 				  &
       & -help "#N#"					  &
       & ')
       call kracken('copy','-i -o -version .false. -help .false')

     Then the command
	copy -?

     would only prompt for the -i and -o parameters.

     A description on how to use the menu mode can be generated by entering
     a question mark ("?") at the prompt once menu mode has been invoked.

  Usage Notes

    the reserved -oo keyword

     Everything before any switch is always referred to as 'VERB_oo' in
     RETREV(3f). This same value can also be set later in the command line
     by using the reserved keyword -oo (or the alias --). Often, you can
     ignore it exists, but the -oo option is always there. Unlike other
     parameters a default value is ignored unless no parameters are
     specified on the command line. That is, in general do not set a default
     value for the -oo parameter. It should almost always be initially a
     blank string.

     Note that you can just put the calls to RETREV() or the convenience
     routines where you need the information in your program instead of
     parsing everything in a single routine. But parsing them and storing
     them into a COMMON or MODULE is more efficient if the routine doing the
     parsing is called many times.
    Sample showing -oo parameter and retrieving data in subroutines

       program demo_M_kracken
       use M_kracken, only : kracken
       implicit none
       real :: x, y
       ! define and crack command line arguments
       call kracken('cmd',' DEFAULT STRING -x 123 -y 456 ')
       call showstring()
       call showvalue()
       contains

       subroutine showstring()
       use M_kracken, only : sget
       character(len=:),allocatable :: string
       ! get value of string before any switch
       string=trim(sget('cmd_oo'))
       write(*,*)'string is ',string
       end subroutine showstring

       subroutine showvalue()
       use M_kracken, only : rget
       ! show values for -x and -y parameters
       x=rget('cmd_x')
       y=rget('cmd_y')
       write(*,*)' X and Y are ',x,y
       end subroutine showvalue

       end program demo_M_kracken

	xxx
	 string is DEFAULT STRING
	  X and Y are	 123.000000	  456.000000

	xxx -x 987.653992
	 string is
	  X and Y are	 987.653992	  456.000000

	xxx -oo BBBB -oo CCCC
	 string is BBBB CCCC
	  X and Y are	 123.000000	  456.000000

	xxx AAAA BBBB -oo CCCC
	 string is AAAA BBBB CCCC
	  X and Y are	 123.000000	  456.000000

     You may note that the parsing rules are not identical to Unix, although
     very similar.

  SYNTAX:

    verb[-oo|--] value for kw_oo
      [-kw1 value_for_kw1] [-kw2 value_for_kw2] [-kw3 va lue_for_kw3] ...
      where "kw" stands for a keyword name

      •  Quotes are rarely needed. A keyword is assumed whenever " -[A-Za-Z]"
	 (space followed by dash followed by letter) is encountered. So cmd
	 -title This is my title -value 10.3e2

	 would produce a value of "This is my title" for dictionary value
	 "cmd_title". This does mean if your value contains " -letter" you
	 must quote your command such that the program sees the string
	 surrounded with double-quotes. Depending on the shell you are using
	 this can be awkward. For example, in the bash shell you might use cmd
	 -title '"-A is a bad title to need"' cmd -title /"-A is a bad title
	 to need/"

      •  The keyword -oo is implied after the verb.

      •  There is no way to terminate a keyword value except by starting a new
	 keyword. This means when you use shell globbing you often want
	 filenames to be the first parameter (and dictionary "cmd_oo" will
	 hold the filenames): cmd * -value 10.3e2

	 Many (but not all) Unix commands have such values allowed wherever
	 another value is not allowed (Surprised? "ls -r * -l" works as well
	 as "ls -r -l *" .). This is why quoting and specification of which
	 keywords require values and which do not is usually required on Unix
	 commands. Alternatively, just ignore the -oo field and always require
	 keywords for all values.

      •  You cannot combine keywords (-ir is not equivalent to -i -r, which is
	 sometimes allowed on Unix commands).

      •  Although this is rarely needed in practice, You may find the way to
	 include a literal double-quote character (") as part of an input
	 value is the most unlike Unix -- Double the double-quote. Again,
	 shells often expand double-quotes, so in the bash(1) shell you might
	 have to enter

	 cmd
	   -string \"\"

      to give the "cmd_string" dictionary value the simple value '"'.

      •  --KEYWORD is equivalent to -KEYWORD; primarily so that the --version
	 and --help options are easily supported.

      •  If a keyword is specified multiple times thtroff: <standard input>:78: warning: macro 'define'' not defined (possibly missing space after 'de')
troff: <standard input>:80: warning: macro 'add'' not defined (possibly missing space after 'ad')

gzip: stdout: Permission denied
e values are concatenated
	 into a single value with a space delimiter between the values. That
	 is, cmd -D 10 -D 20 -D 30

	     would set the dictionary variable "cmd_D" to '10 20 30'.

      •  All commands automatically have the -? keyword, which evokes
	 interactive menu mode.

    Alternate command line input syntax

       If you actually prefer quoting your arguments and having your unnamed
       variables at the end of your command and support for the "--" option
       supported by some GNU and Unix commands you can set the command line
       parsing option "style='args'". This will not change how you specify the
       parameters to the kracken(3f) command except possibly for Boolean
       switches, but allows for entering commands in a manner more like the C
       routine getopts(3c). If you turn the mode on the "-oo" parameter is
       ignored unless you specifically assign it a value by name; the values
       need quoted if they contain spaces and the option "--" specifies that
       the rest of the command line is composed of unnamed strings. The
       unnamed values will go into the CHARACTER array "unnamed". The way the
       command line input is parsed is the same as in the M_args(3f) module.
       That means instead of entering:

	 program show_standard
	 use M_kracken, only : kracken, sgets, rget, sget, lget
	 implicit none
	 character(len=:),allocatable :: files(:)
	 character(len=:),allocatable :: title
	 real :: x,y
	 integer :: i
	 ! define and crack command line arguments
	 call kracken('cmd',' --title this is my title -x 123 -y 456 --help .false.'
    )

	 title=sget('cmd_title')
	 x=rget('cmd_x')
	 y=rget('cmd_y')
	 write(*,*)'help=',lget('cmd_help')
	 write(*,*)' title is ',title
	 write(*,*)' x and y are ',x,y
	 ! get value of string before any switch
	 files=sgets('cmd_oo')
	 if(size(files).gt.0)then
	    do i=1,size(files)
	       write(*,*)i,files(i)
	    enddo
	 endif
	 end program show_standard

    Add "style='args'" to the kracken call and "unnamed" from the
    M_kracken(3fm) module, and the unnamed values will be in the string array
    "unnamed" instead of obtained from something like "sgets('cmd_oo').

      With "style='args' other differences are in how you specify your command
      prototype. You MUST use the string ".false." for any boolean switch
      variable default value; and basically the values ".true." and ".false."
      are reserved, regardless of case. This is normally how you specify
      booleans anyway; but in the default style you can set your default to
      ".true." or use other values for ".false." like "F" or ".F.".

      The way the arguments will then be read upon input are the same as
      described in the M_args(3fm) module.

	   program show_alternate
	   use M_kracken, only : kracken, sget, rget, lget
	   USE M_KRACKEN, ONLY : UNNAMED
	   implicit none
	   character(len=:),allocatable :: title
	   real :: x,y
	   integer :: i
	   ! define and crack command line arguments
	   !
	   !
	   call kracken('cmd',' --title this is my title &
	    & -x 123 -y 456 --help .false.',style='args')
	   title=sget('cmd_title')
	   x=rget('cmd_x')
	   y=rget('cmd_y')
	   write(*,*)'help=',lget('cmd_help')
	   write(*,*)' title is ',title
	   write(*,*)' x and y are ',x,y

	   IF(SIZE(UNNAMED).GT.0)THEN
	      DO I=1,SIZE(UNNAMED)
		 WRITE(*,*)I,UNNAMED(I)

   ENDDO
   ENDIF
  end program show_alternate Sample usage:

      # first program uses default M_kracken parsing

	 cmd *.f90 -x 100 --title A new title -y 200

      # or

	 cmd -x 100 --title A new title -y 200 -oo *.f90

      # second program uses alternate command-line parsing.
      # the unnamed values go into the string array
      # UNNAMED but can appear anywhere on the command.
      # multi-word values require being quoted.

      cmd -x 100 -y 200 --title 'A new title' *.f90

       Contributors:
       * John S. Urban -- Author (last change: Oct. 2019)
       * Felix Becker -- Enhancements to reduce limitations on parameter
	 lengths (2013-05-28)
       * Walid Keyrouz -- Upgrades to bring code into conformance with
	 recommended practices (2013-12-06)

  .fi</xmp </div> </div> </div> </div> </body> </html>

  References

    1.	http://www.urbanjost.altervista.org/LIBRARY/libGPF/GPF.html

    2.	file:///home/urbanjs/venus/V600/github7/arguments/src2015/krackenhelp.html

    3.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#ABSTRACT

    4.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#EX1

    5.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#DESCRIPTION

    6.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#MENU

    7.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#USAGE

    8.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/M_kracken.3m_kracken.html#ARGS

    9.	file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/download.html

  10. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/kracken.3.html

      11. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/retrev.3.html

      12. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lget.3.html

      13. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rget.3.html

      14. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dget.3.html

      15. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/iget.3.html

      16. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sget.3.html

      17. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/lgets.3.html

      18. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/rgets.3.html

      19. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dgets.3.html

      20. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/igets.3.html

      21. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/sgets.3.html

      22. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/dissect.3.html

      23. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/parse.3.html

      24. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/store.3.html

      25. file:///home/urbanjs/venus/V600/github7/ARGS/M_kracken/docs/show.3.html

				April 16, 2023			    untitled()
parse(3m_kracken)					     parse(3m_kracken)

NAME
  parse(3f) - [ARGUMENTS:M_kracken] parse user command and store tokens into
  Language Dictionary (LICENSE:PD)

SYNOPSIS
  recursive subroutine parse(verb,string,allow,error_return)

     character(len=*),intent(in)     ::  verb
     character(len=*),intent(in)     ::  string
     character(len=*),intent(in)     ::  allow
     integer,optional,intent(out)    ::  error_return

DESCRIPTION
  given a string of form

       value  -var value -var value

  define variables of form

       verb_var(i) = value

  --var will become verb__var

  •  values may be in double quotes if they contain alphameric characters

  •  a # signifies the rest of the line is a comment

  •  adjacent double quotes put one double quote into value

  •  processing ends when an unquoted semi-colon or end of string is
     encountered

  •  the variable name for the first value is verb_init (often verb_oo)

  •  leading and trailing blanks are removed from values

  •  call it once to give defaults

  •  call it again and vars without values are set to null strings

OPTIONS
  VERB
    command name to process

  STRING
    string is character input string with first verb removed (options + other
    commands)

  ALLOW
    flag to allow or disallow new VERB_KEYWORD name being added. Should be

   NEW VARIABLES ARE ALLOWED
  •

  •

   NO NEW VARIABLES ARE ALLOWED
  •

  •

  That is, ff 'add' or 'append' and the value is not blank it will be APPENDED
  to the current value. If 'define' or to it.

RETURNS
  ERROR_RETURN
    error code. If zero, no error occurred

EXAMPLE
  sample program:

     program demo_parse
     use M_kracken, only : parse, sget, iget, rget
     use M_strings, only : chomp
gzip: stdout: Permission denied

gzip: stdout: Permission denied

gzip: stdout: Permission denied

     implicit none
     character(len=:),allocatable  :: verb
     character(len=*),parameter    :: delimiters=' ;,'
     integer	 :: i
     integer	 :: ierr
     character(len=132) :: line
     character(len=132), parameter :: commands(5)= [character(len=132) :: &
       'start -i 10 -message this is a message', &
       'end -i 20 -j 30 -k 55.55 ', &
       'list', &
       'help -oo', &
       'end -i 44.44 ']
       do i=1,size(commands)
	  line=commands(i) ! need mutable line
	  if(chomp(line,verb,delimiters).ge. 0)then
	     call parse(verb,line,'add',ierr)
	     write(*,*)'do whatever a '//verb//' command does'
	     select case(verb)
	     case('start')
		write(*,*)trim(sget('start_i'))
		write(*,*)trim(sget('start_message'))
	     case('end')
		write(*,*)iget('end_i')
		write(*,*)iget('end_j')
		write(*,*)rget('end_k')
	     case('list')
		write(*,*)'list things'
	     case('help')
		write(*,*)'show help text'
	     endselect
	  endif
       enddo
       ! look at some of the values as strings or numbers
       write(*,*)trim(sget('start_i'))
       write(*,*)trim(sget('start_message'))
       write(*,*)iget('end_i')
       write(*,*)iget('end_j')
       write(*,*)rget('end_k')
     end program demo_parse

  Results:

      do whatever a start command does
      10
      this is a message
      do whatever a end command does
	       20
	       30
	55.5499992
      do whatever a list command does
      list things
      do whatever a help command does
      show help text
      do whatever a end command does
	       44
	       30
	55.5499992
      10
      this is a message
	       44
	       30
	55.5499992

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		     parse(3m_kracken)
retrev(3m_kracken)					    retrev(3m_kracken)

NAME
  RETREV(3f) - [ARGUMENTS:M_kracken] get keyword value as a string from a
  command's argument list processed by kracken(3f) (LICENSE:PD)

SYNOPSIS
  SUBROUTINE retrev(name, string, len, ier)

     CHARACTER(len=*),intent(in)  :: name
     CHARACTER(len=*),intent(out) :: string
     INTEGER,intent(out)	  :: len
     INTEGER,intent(out)	  :: ier

DESCRIPTION
  When a command has had its command argument list parsed using the
  kracken(3f) routine the value associated with any keyword can be retrieved
  as a string.

OPTIONS
  NAME
    parameter name of form VERB_KEYWORD

  STRING
    returned parameter value

  LEN
    length of returned STRING

  IER
    error flag. Any non-zero value means an error occurred

EXAMPLE
  Sample program:

      program demo_retrev
      use M_kracken, only : kracken, retrev
      use M_kracken, only : IPvalue ! length of keyword value
      implicit none
      character(len=IPvalue) :: val
      integer		     :: len, ier

      call kracken('demo', ' -value my default string')
      call retrev('demo_value',val,len,ier)
      write(*,'(a)')'VALUE IS '//trim(val)

      end program demo_retrev

  Example execution and output:

      $ ./demo_retrev
      VALUE IS my default string

      $ ./demo_retrev -value use this value instead
      VALUE IS use this value instead

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		    retrev(3m_kracken)
rget(3m_kracken)					      rget(3m_kracken)

NAME
  rget(3f) - [ARGUMENTS:M_kracken] given keyword fetch real value from command
  argument (LICENSE:PD)

SYNOPSIS
  function rget(keyword) result(value)

      character(len=*),intent(in)  :: keyword
      real			   :: value

DESCRIPTION
  The rget(3f) function returns a scalar real value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  KEYWORD
    the dictionar
gzip: stdout: Permission denied

gzip: stdout: Permission denied

gzip: stdout: Permission denied
y keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a REAL
    value.

RETURNS
  VALUE
    real value returned by function

EXAMPLE
  Sample program

     program demo_rget
     use M_kracken, only: kracken, rget
     implicit none
     real :: val
       ! define command arguments and parse user command
       call kracken('demo','-val 3.1416' )
       val=rget('demo_val') ! get any values specified on -val option
       write(*,*)val	    ! print the value
     end program demo_rget

  Example program runs:

     $ demo_rget
	3.14159989

     $ demo_rget -val 10
	10.0000000

     $ demo_rget -val 3.000
	3.00000000

SEE ALSO
  M_kracken(3fm), kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse,dissect,store,setprompts,show

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		      rget(3m_kracken)
rgets(3m_kracken)					     rgets(3m_kracken)

NAME
  rgets(3f) - [ARGUMENTS:M_kracken] given keyword fetch real array from
  command arguments (LICENSE:PD)

SYNOPSIS
  function rgets(keyword,ier) result(rarray)

      character(len=*),intent(in)   :: keyword
      real,allocatable		    :: rarray(:)
      integer,optional,intent(iout) :: ier

DESCRIPTION
  The rgets(3f) function returns a dynamically allocated array of real values
  from a string that is the value for a command line option. It is part of the
  M_kracken(3fm) module.

  Values that cannot be read as a numeric value are returned as a NaN.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a list of
    REAL values.

RETURNS
  RARRAY
    real array returned by function.  The array will have zero size if the
    parsed dictionary entry is blank.

  IER
    If present and non-zero an error occurred in converting strings to a value

EXAMPLE
  Sample program converts between Celcius and Fahrenheit

     program demo_rgets
     use M_kracken, only: kracken, rgets
     implicit none
     real,allocatable  :: val(:)
     integer :: i
       ! define command arguments and parse user command
       call kracken('fc','-F -C' )

       ! get any values specified on -C option
       val=rgets('fc_C')
       ! test if have something to print in C ==> F table
       if(size(val).gt.0)then
	  ! print the requested values
	  write(*,'(a,t14,a)')'celsius','fahrenheit'
	  write(*,'(f5.1,t14,f5.1)')( val(i),(val(i)+40.0)*9.0/5.0 - 40.0,i=1,size(val))
       endif

       val=rgets('fc_F')
       ! check for values on -F
       if(size(val).gt.0)then
	  write(*,'(a,t14,a)') 'fahrenheit', 'celsius'
	  write(*,'(f5.1,t14,f5.1)')(val(i),(val(i)+40.0)*5.0/9.0 - 40.0,i=1,size(val))
       endif
     end program demo_rgets

  Example program runs:

     % demo_rgets -C -273.15 0 100 -40 37
     celsius	  fahrenheit
      -273.15	   -459.67
	 0.0	     32.0
       100.0	    212.0
       -40.0	    -40.0
	37.0	     98.6

     % demo_rgets -F -459.67 32 212 -40 98.6
     fahrenheit   celsius
      -459.67	   -273.15
	32.00	      0.00
       212.00	    100.00
       -40.00	    -40.00
	98.60	     37.00

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		     rgets(3m_kracken)
setprompts(3m_kracken)					setprompts(3m_kracken)

NAME
  setprompts(3f) - [ARGUMENTS:M_kracken] set explicit prompts for keywords in
  interactive mode (LICENSE:PD)

SYNOPSIS
  subroutine setprompts(verb,init)

     character(len=*),intent(in):: verb
     character(len=*),intent(in):: init

DESCRIPTION
  Optionally set prompts for interactive pr
gzip: stdout: Permission denied

gzip: stdout: Permission denied
ompting mode.  The syntax of the
  call is the same as for KRACKEN(3f)/DISSECT(3f) except that prompt strings
  are given instead of default values. It is called before a call to
  KRACKEN(3f) or DISSECT(3f).

OPTIONS
  verb
    name to define prompts for

  string
    to define prompts instead of values

EXAMPLE
  Sample program:

      program demo_setprompts
      use M_kracken, only : kracken,iget,rget,sget,setprompts
      implicit none

      call setprompts('demo', ' -int My INTEGER value  -float My REAL value  -str My CHARACTER value')
      call kracken(   'demo', ' -int 100 -float 123.456 -str DEFAULT')
      write(*,'(a,i0)')'INTEGER IS ',iget('demo_int')
      write(*,'(a,g0)')'REAL IS ',rget('demo_float')
      write(*,'(a,a)')'STRING IS '//trim(sget('demo_str'))

      end program demo_setprompts

  Example execution and output:

	 $ demo_setprompts -?
	 demo parameters are
	 >   1)My CHARACTER value:[DEFAULT]
	     3)My INTEGER value:[100]
	     4)My REAL value:[123.456]
	 Enter parameter number to change("RETURN" to finish):

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		setprompts(3m_kracken)
sget(3m_kracken)					      sget(3m_kracken)

NAME
  sget(3f) - [ARGUMENTS:M_kracken] given keyword fetch string value and length
  from command arguments (LICENSE:PD)

SYNOPSIS
  function sget(name,ilen) result(string)

     character(len=*),intent(in)   :: name	  ! name to look up in dictionary
     integer,intent(out),optional  :: ilen	  ! length of returned output string
     character(len=:),allocatable  :: string	  ! returned value

DESCRIPTION
  The sget(3f) function returns a scalar character value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  name
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the second argument to the KRACKEN(3f) call.  This routine
    trusts that the desired name exists.

RETURNS
  string
    returned string. If LEN(STRING).EQ.0 an error occurred, such as NAME not
    being in the dictionary.

  ilen
    optional length of returned output string

EXAMPLE
  Sample program:

     program demo_sget
     use M_kracken, only: kracken, sget
     implicit none
     character(len=:),allocatable :: string, a, b
       ! define command arguments and parse user command
       call kracken('demo','-string This is the default -a A default -b B default' )
       ! get any values specified on command line for -truth
       string=sget('demo_string')
       a=sget('demo_a')
       b=sget('demo_b')
       write(*,'("string is ",a)')trim(string)
       write(*,'("a is ",a)')trim(a)
       write(*,'("b is ",a)')trim(b)
     end program demo_sget

  Example program runs:

     $demo_sget
     string is This is the default
     a is A default
     b is B default

     $ demo_sget -a A value for A -string new value for string -b BBBBBBB
     string is new value for string
     a is A value for A
     b is BBBBBBB

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		      sget(3m_kracken)
sgets(3m_kracken)					     sgets(3m_kracken)

NAME
  sgets(3f) - [ARGUMENTS:M_kracken] given keyword fetch string value parsed on
  whitespace into an array (LICENSE:PD)

SYNOPSIS
  function sgets(name,delim) result(strings)

     character(len=*),intent(in) :: name
     character(len=*),intent(in),optional :: delim
     character(len=:),allocatable :: strings(:)

DESCRIPTION
  The sgets(3f) function returns a dynamically allocated array of character
  values from a string that is the value for a command line option. It is part
  of the M_kracken(3fm) module.

OPTIONS
  name
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) or DISSECT(3f) call. The
    KEYWORD is a keyword from the second argument to the KRACKEN(3f) or
    DISSECT(3f) call.  This routine trusts that the desired name exists.  If
    the name does not exist the array [char(0)] is returned.  An array of zero
    size is returned if the string is blank.

  delim
    characters to split the string at into elements

RETURNS
  strings
    returned string array

EXAMPLE
  Sample program:

     program demo_sgets
     use M_kracken, only : kracken, sgets
     implicit none
     character(len=:),allocatable :: strings(:)
     integer :: i
	call kracken('cmd',' -string	This   is  a sentence ')
	strings= sgets("cmd_string")		! get -strings words
	print *, "string=",('['//trim(strings(i))//']',i=1,size(strings))
	print *, "len= ",len(strings)
	print *, "size=",size(strings)
     end program demo_sgets

  Example program execution:

     $ demo_sgets
      string=[This][is][a][sentence]
      len=	      8
      size=	      4

     $ demo_sgets -string a b c d e f g
      string=[a][b][c][d][e][f][g]
      len=	      1
      size=	      7

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		     sgets(3m_kracken)
show(3m_kracken)					      show(3m_kracken)

NAME
  show(3f) - [ARGUMENTS:M_kracken] dump dictionary entries (LICENSE:PD)

SYNOPSIS
  subroutine show(VERB_NAME0,VERBS_ONLY,IWIDE)

     character(len=*),intent(in)   :: VERB_NAME0
     logical,intent(in) 	   :: VERBS_ONLY
     integer,intent(in) 	   :: iwide

DESCRIPTION
  Write information about a command from the command dictionary or list all
  the command verbs in the dictionary

OPTIONS
  VERB_NAME0
    verb prefix to display. Default is all

  VERBS_ONLY
    flag to show verbs only

  IWIDE
    if .ge. zero, how many columns wide to show just verbs

EXAMPLE
  Sample program:

      program demo_show
      use M_kracken, only : kracken, show
      implicit none

      call kracken('demo', ' default keyword -i 10 -j 20.20 -value my default string')
      call show('demo',.false.,0)

      end program demo_show
  Results:

      demo_value	   = my default string
      demo_oo		   = default keyword
      demo_j		   = 20.20
      demo_i		   = 10
      demo_?		   = .false.
      demo_>		   = #N#

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		      show(3m_kracken)
store(3m_kracken)					     store(3m_kracken)

NAME
  store(3f) - [ARGUMENTS:M_kracken] add or replace value for specified name in
  dictionary(if allow='add' add name if needed) (LICENSE:PD)

SYNOPSIS
  subroutine store(name1,value1,allow1,ier)

     character(len=*),intent(in) :: name1
     class(*),intent(in)	 :: value1
     character(len=*),intent(in) :: allow1
     integer,intent(out)	 :: ier

DESCRIPTION
  Normally a command string and the associated values are placed in the
  dictionary by a call to KRACKEN(3f) when parsing a command line, or
  DISSECT(3f) and PARSE(3f) when creating input file interpreters. Rarely
  there may be a need to place <NAME,VALUE> pairs directly into the command
  dictionary, so this routine is public in the M_kracken(3fm) module. However,
  *this routine is primarily assumed to be an internal procedure*.

OPTIONS
  NAME1
    name in dictionary of form VERB_KEYWORD

  VALUE1
    value to be associated to NAME1. Value may be of type INTEGER, REAL,
    DOUBLEPRECISION, LOGICAL or CHARACTER.

  ALLOW1
    flag to allow new VERB_KEYWORD name being added. Sho
gzip: stdout: Permission denied

gzip: stdout: Permission denied
uld be

    'define'
      add or replace a new VERB_KEYWORD entry and value

    'add'
      add or append to a new VERB_KEYWORD entry and value

    'no_add' or 'append'
      append to an *EXISTING* entry value

    'replace'
      replace an *EXISTING* entry

  If 'add' or 'append' and the value is not blank it will be APPENDED to the
  current value. If 'define' or 'replace' it will replace the value instead of
  appending to it.

RETURNS
  IER
    flag if error occurs in adding or setting value

EXAMPLE
  Sample program:

     program demo_store
     use M_kracken, only : store, show
     implicit none
     integer :: ier
     ! The following should be equivalent to
     ! call kracken('MY',' &
     ! & -STRING My string value &
     ! & -INTEGER 1234 &
     ! & -INTEGER 0987654321 &
     ! & -REAL 1234.5678 &
     ! & -DOUBLE 123.4567d8 &
     ! & -LOGICAL T &
     ! & '
     call store('MY_STRING','My string value','add',ier)
     if(ier.ne.0)write(*,*)'ERROR: could not store MY_STRING ier=',ier
     ! now the verb MY is defined with the option -STRING so the
     ! dictionary has MY_STRING='My string value' defined

     ! this will be an error because MY does not have the -INTEGER
     ! keyword defined
     call store('MY_INTEGER',12345678,'no_add',ier)

     ! now define MY_INTEGER
     call store('MY_INTEGER',1234,'add',ier)
     ! if 'no_add' it will APPEND to current string
     call store('MY_INTEGER',987654321,'add',ier)

     call store('MY_REAL',1234.5678,'add',ier)
     call store('MY_DOUBLE',123.4567d8,'add',ier)
     call store('MY_LOGICAL',.true.,'add',ier)

     call show('MY',.false.,0)
     write(*,*)repeat('=',76)

     ! if 'replace' is used REPLACE instead of APPEND to current value
     call store('MY_INTEGER',987654321,'replace',ier)
     call show('MY',.false.,0)
     write(*,*)repeat('=',76)

     ! 'replace' can only replace an existing entry, not add one
     call store('MY_UNKNOWN',987654321,'replace',ier)
     call show('MY',.false.,0)
     write(*,*)repeat('=',76)

     end program demo_store

  Results:

     >########################################################
     >error: UNKNOWN OPTION -INTEGER
     >MY parameters are
     > -STRING My string value
     >########################################################
     > MY_STRING	    = My string value
     > MY_REAL		    = 1234.5677
     > MY_LOGICAL	    = T
     > MY_INTEGER	    = 1234 987654321
     > MY_DOUBLE	    = 12345670000.000000
     > =======================================================================
     > MY_STRING	    = My string value
     > MY_REAL		    = 1234.5677
     > MY_LOGICAL	    = T
     > MY_INTEGER	    = 987654321
     > MY_DOUBLE	    = 12345670000.000000
     > =======================================================================
     >########################################################
     >error: UNKNOWN OPTION -UNKNOWN
     >MY parameters are
     > -STRING My string value
     > -REAL 1234.5677
     > -LOGICAL T
     > -INTEGER 987654321
     > -DOUBLE 12345670000.000000
     >########################################################
     > MY_STRING	    = My string value
     > MY_REAL		    = 1234.5677
     > MY_LOGICAL	    = T
     > MY_INTEGER	    = 987654321
     > MY_DOUBLE	    = 12345670000.000000
     > =======================================================================

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		     store(3m_kracken)
igets(3m_kracken)					     igets(3m_kracken)

NAME
  igets(3f) - [ARGUMENTS:M_kracken] given keyword fetch integer array from
  command arguments (LICENSE:PD)

SYNOPSIS
  function igets(keyword,ier) result(iarray)

      character(len=*),intent(in)   :: keyword
      integer,allocatable	    :: iarray(:)
      integer,optional,intent(iout) :: ier

DESCRIPTION
  The igets(3f) function returns a dyn
gzip: stdout: Permission denied

gzip: stdout: Permission denied
amically allocated array of integers
  from a string that is the value for a command line option. It is part of the
  M_kracken(3fm) module.

  Values that cannot be read as an integer value are returned as a NaN.

OPTIONS
  KEYWORD
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the KRACKEN(3f) call that should be interpreted as a list of
    INTEGER values. Decimal values are allowed but truncated. Note that comma
    characters are ignored.

RETURNS
  IARRAY
    INTEGER array returned by function The array will have zero size if the
    parsed dictionary

  IER
    If present and non-zero an error occurred in converting strings to a value

EXAMPLE
  Sample program

     program demo_igets
     use M_kracken, only: kracken, igets
     implicit none
     doubleprecision,allocatable  :: vals(:)
     integer :: i
     ! define command arguments and parse user command
     call kracken('demo','-nums 1 2 3 100 1000 10000 100,000 11.11111 77.77777 -77.7777' )
     vals=igets('demo_nums') ! get any values specified for -nums
     write(*,'(*(g0:,","))')( vals(i),i=1,size(vals)) ! print the values
     end program demo_igets

  Example program runs:

     $ demo_igets
     1,2,3,100,1000,10000,100000,11,77,-77
     $ demo_igets -val 89,123,456 10.9999999
     89123456,10

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		     igets(3m_kracken)
kracken(3m_kracken)					   kracken(3m_kracken)

NAME
  kracken(3f) - [ARGUMENTS:M_kracken] crack command line options on Fortran
  programs, using "-KEYWORD VALUE" syntax (LICENSE:PD)

SYNOPSIS
  subroutine kracken(verb, string[,ierror][style])

	 character(len=*), intent(in) ::  verb
	 character(len=*), intent(in) :: string
	 integer, intent(out), optional :: ierror
	 character(len=*), intent(in),optional :: style

DESCRIPTION
  This is the main public procedure in the M_kracken(3f) module.  It is used
  to define the command line options, their default values, and to crack the
  command line options using a syntax that looks very much like an execution
  of the program.

OPTIONS
  VERB
    arbitrary command name, usually 'cmd' or the name of the program calling
    the routine. This defines the variable prefix name used by the other
    functions to retrieve command option values.

  STRING
    prototype command to define keywords and defaults.	This string is simply
    a list of all keywords and their default values exactly as you would type
    them on the command line, with default values explicitly set.

  IERROR
    If an error occurs such as an unknown keyword the calling program will be
    stopped unless the optional parameter IERROR is present. If present, it is
    up to the calling program to decide what to do if a non-zero value is
    returned.

  STYLE
    parsing style. Either 'kracken' or 'args'. The default is 'kracken'.

EXAMPLE
  Sample program:

	program demo_kracken

	use M_kracken
	implicit none
	! define command arguments, default values and crack command line
	call kracken('cmd',		 &
	   &   '-int 20 		 &
	   &   -real 10e3		 &
	   &   -file input		 &
	   &   -dble 4.11223344556677d0  &
	   &   -help	.false. 	 &
	   &   -version .false. 	'&
	   &   )
	! that's it. You defined your command arguments and their default
	! values and parsed the user-supplied command line arguments.

	! Now you can just retrieve the values as strings using
	! names of the form VERB_SWITCHNAME anywhere in your program.
	! Note that the special name "VERB_oo"	is for the string
	! before any switch.
	   if(lget('cmd_help'))then ! was -help specified?
	      write(*,*)'The help text'
	      stop
	   endif
	   if(lget('cmd_version'))then ! was -version specified?
	      write(*,*)'version 1.0 20161030'
	      stop
	   endif
	   ! convert all the remaining options to scalar values
	   ! and call a procedure with the values
	   call mymain( 		 &
	   & sget('cmd_file'),		 &
	   & rget('cmd_real'),		 &
	   & dget('cmd_dble'),		 &
	   & iget('cmd_int')		 &
	   & )
	contains
	subroutine mymain(filename,value1,value2,ivalue3)
	! this routine is using conventional values and does
	! not use M_kracken(3fm) module at all
	implicit none
	character(len=*),intent(in) :: filename
	real,intent(in) 	    :: value1
	doubleprecision,intent(in)  :: value2
	integer,intent(in)	    :: ivalue3
	   ! just to show the command arguments have
	   ! been processed echo the values
	   print *, 'filename=',trim(filename)
	   print *, 'values=',value1,value2,ivalue3
	end subroutine mymain
	end program demo_kracken

  expected output from : "./cmd"

	   filename=input
	   values= 10000.0000  4.1122334455667700  20

  expected output from : "./cmd -file myfile -int 1234"

	   filename=myfile
	   values= 10000.0000  4.1122334455667700  1234

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		   kracken(3m_kracken)
lget(3m_kracken)					      lget(3m_kracken)

NAME
  lget(3f) - [ARGUMENTS:M_kracken] given keyword fetch logical value from
  command arguments (LICENSE:PD)

SYNOPSIS
  function lget(keyword) result(lval)

      character(len=*),intent(in)  :: keyword
      logical			   :: lval

DESCRIPTION
  The lget(3f) function returns a scalar logical value from a command line
  argument using the M_kracken(3fm) module.

OPTIONS
  keyword
    the dictionary keyword (in form VERB_KEYWORD) to retrieve.	The VERB name
    comes from the first argument of the KRACKEN(3f) call. The KEYWORD is a
    keyword from the second argument to the KRACKEN(3f) call.

RETURNS
  lval
    logical value returned by function. The input value should be from the
    case-insensitive list of the words "true, false, t, f, yes, no, y, n,
    .false., .true., .f., .t.,''". .TRUE. is returned if the corresponding
    string in the dictionary for KEYWORD is blank.  .FALSE. is returned if a
    string not in the list is found.

EXAMPLE
  Sample program:

     program demo_lget
     use M_kracken, only: kracken, lget
     implicit none
     logical  :: val
       ! define command arguments and parse user command
       call kracken('demo','-truth .F.' )
       ! get any values specified on command line for -truth
       val=lget('demo_truth')
       write(*,'("The truth is ",l1)')val
     end program demo_lget

  Example program runs:

       $ demo_lget	       # uses the default
       The truth is F
       $ demo_lget -truth      # A BLANK VALUE IS TRUE
       The truth is T
       $ demo_lget -truth yes  # Y, yes, T, true, .T., .true. are all true
       The truth is T
       $ demo_lget -truth F    # N, no, F, false, .F., .FALSE. are all false
       The truth is F

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		      lget(3m_kracken)
dgets(3m_kracken)					     dgets(3m_kracken)

NAME
  dgets(3f) - [ARGUMENTS:M_kracken] given keyword fetch doubleprecision array
  from command arguments (LICENSE:PD)

SYNOPSIS
  function dgets(keyword,ier) result(darray)

      character(len=*),intent(in)   :: keyword
      doubleprecision,allocatable   :: DARRAY
      integer,optional,intent(iout) :: ier

DESCRIPTION
  The dgets(3f) function returns a dynamically allocated array of
  doubleprecision values from a string that is the value for a command line
  option. It is part of the M_kracken(3fm) module.

  Values that cannot be read as a numeric value are returned as a NaN.

OPTIONS
  keyword
    dictionary name to retrieve, of form VERB_NAME where VERB is taken from
    the first parameter of the call to KRACKEN(3f) or DISSECT(3f).

RETURNS
  darray
    double precision numeric array returned by function. The array will have
    zero size if the parsed dictionary entry is blank.

  IER
    If present and non-zero an error occurred in converting strings to a value

EXAMPLE
  Sample program

     program demo_dgets
     use M_kracken, only: kracken, dgets
     implicit none
     doubleprecision,allocatable  :: vals(:)
     integer :: i
     ! define command arguments and parse user command
     call kracken('demo','-nums 1 2 3 1000 100,000 11.11111 77.77777 -77.7777' )
     vals=dgets('demo_nums') ! get any values specified for -nums
     write(*,'(*(g0:,","))')( vals(i),i=1,size(vals)) ! print the values
     end program demo_dgets

  Example program runs:

     $ demo_dgets
      1.0000000000000000,2.0000000000000000,3.0000000000000000,
      1000.0000000000000,100000.00000000000,11.111110000000000,
      77.777770000000004,-77.777699999999996

     $ demo_dgets -nums 89,123,456.789 10.9999999
      89123456.789000005,10.999999900000001

SEE ALSO
  M_kracken(3f),
    kracken(3f)

  dget(3f), dgets(3f), iget(3f), igets(3f), lget(3f), lgets(3f), rget(3f),
  rgets(3f), sget(3f), sgets(3f), retrev(3f)

  parse(3f), dissect(3f), store(3f), setprompts(3f), show(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain

				April 16, 2023		     dgets(3m_kracken)
+ make ship
: make easily distributed archive files of manpages
mkdir -p ../docs
cd ../man/man3;\
   gzip *.3m_kracken;\
   zip -r ../../docs/manpages.zip *gz;\
   tar cvfz ../../docs/manpages.tgz *gz;\
   gunzip *.3m_kracken.gz
updating: ARGUMENTS.3.gz (stored 0%)
updating: M_kracken.3m_kracken.gz (stored 0%)
updating: dget.3m_kracken.gz (stored 0%)
updating: dgets.3m_kracken.gz (stored 0%)
updating: dissect.3m_kracken.gz (stored 0%)
updating: iget.3m_kracken.gz (stored 0%)
updating: igets.3m_kracken.gz (stored 0%)
updating: kracken.3m_kracken.gz (stored 0%)
updating: lget.3m_kracken.gz (stored 0%)
updating: lgets.3m_kracken.gz (stored 0%)
updating: parse.3m_kracken.gz (stored 0%)
updating: retrev.3m_kracken.gz (stored 0%)
updating: rget.3m_kracken.gz (stored 0%)
updating: rgets.3m_kracken.gz (stored 0%)
updating: setprompts.3m_kracken.gz (stored 0%)
updating: sget.3m_kracken.gz (stored 0%)
updating: sgets.3m_kracken.gz (stored 0%)
updating: show.3m_kracken.gz (stored 0%)
updating: store.3m_kracken.gz (stored 0%)
ARGUMENTS.3.gz
M_kracken.3m_kracken.gz
dget.3m_kracken.gz
dgets.3m_kracken.gz
dissect.3m_kracken.gz
iget.3m_kracken.gz
igets.3m_kracken.gz
kracken.3m_kracken.gz
lget.3m_kracken.gz
lgets.3m_kracken.gz
parse.3m_kracken.gz
retrev.3m_kracken.gz
rget.3m_kracken.gz
rgets.3m_kracken.gz
setprompts.3m_kracken.gz
sget.3m_kracken.gz
sgets.3m_kracken.gz
show.3m_kracken.gz
store.3m_kracken.gz
+ make help
: make    '-- build M_kracken module'
: run     '-- run manpage demo programs and test program'
: man     '-- show all manpages as text'
: ship    '-- rebuild archive files of manpages'
: clean   '-- clean directory of object files and executables'
: doxygen '-- run doxygen(1) if you have it'
: help    '-- display this text'
+ make clean
rm -f ../example/demo_M_kracken  M_kracken.o  *.mod ../test/test_suite_M_kracken 
+ echo '>>>> fpm test'
>>>> fpm test
+ cd ../..
+ fpm test
<ERROR>*cmd_run* Targets error: Unable to find source for module dependency: "m_journal" used by "build/dependencies/M_args/src/M_args.f90"
STOP 1
+ echo '>>>> make BOOK html document'
>>>> make BOOK html document
+ env MANPATH=../../man mandb -c
mandb: warning: $MANPATH set, ignoring /etc/manpath.config
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man1'. Wait...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man1/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man3'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man2'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man2/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man4'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man4/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man6'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man6/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man7'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man7/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man8'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man8/M_kracken.3m_kracken: ignoring bogus filename
Updating index cache for path `/home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man5'. Wait...
mandb: warning: /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/man5/M_kracken.3m_kracken: ignoring bogus filename
done.
Checking for stray cats under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat8...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat1...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat3...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat4...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat6...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat2...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat5...
Processing manual pages under /home/urbanjs/venus/V600/github7/ARGS/M_kracken/src/source/../../man/cat7...
8 man subdirectories contained newer manual pages.
19 manual pages were added.
0 stray cats were added.
+ env OUTPUT_DIR=../../docs/ MAN_CMD=man MANPATH=../../man GPF_book M_kracken m_kracken
Creating book M_kracken
                                                                        
                                                                        
 XX   XX         XX                              XX                     
  X   X           X                               X                     
  XX XX           X                               X                     
  XX XX           X  XX  XXX XX   XXXX    XXXXX   X  XX   XXXXX  XX XX  
  X X X           X  X     XX  X      X  X     X  X  X   X     X  XX  X 
  X X X           X X      X      XXXXX  X        X X    XXXXXXX  X   X 
  X   X           XXX      X     X    X  X        XXX    X        X   X 
  X   X           X  X     X     X    X  X     X  X  X   X     X  X   X 
 XXX XXX         XX   XX XXXXX    XXXX X  XXXXX  XX   XX  XXXXX  XXX XXX
                                                                        
        XXXXXXXX                                                        
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_book:
________________________________________________________________________________
   TOPIC      M_kracken
   SECTION    m_kracken
   OUTPUT_DIR ../../docs/
   MAN_CMD    man
   MANPATH    ../../man
________________________________________________________________________________
+ HTML
+ cat
+ cat
++ date +%Y-%m-%d
+ cat
+ cat
+ cat
+ echo 'function loadthem(){'
+ '[' M_kracken = INDEX ']'
+ uniq
+ read NAME
+ awk '{printf "%s.%s.html\n",$1,$2}'
+ echo M_kracken.3m_kracken.html
+ tr -d '()'
+ uniq
+ env LC_ALL=C /usr/bin/sort -k 2r,2r -k 1,1
+ man -k '\[M_kracken\>'
+ grep -i '(3M_kracken)'
\[M_kracken\>: nothing appropriate.
+ man --section 3m_kracken -k .
+ grep -i '(3M_kracken)'
+ man -k '\[M_kracken\>'
+ env LC_ALL=C /usr/bin/sort -k 2r,2r -k 1,1
+ grep -vi '(3M_kracken)'
\[M_kracken\>: nothing appropriate.
+ '[' -r ../../docs//M_kracken.3m_kracken.html..html ']'
+ read NAME
+ '[' -r ../../docs//M_kracken.3m_kracken.html ']'
+ echo 'append("M_kracken.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//dget.3m_kracken.html ']'
+ echo 'append("dget.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//dgets.3m_kracken.html ']'
+ echo 'append("dgets.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//dissect.3m_kracken.html ']'
+ echo 'append("dissect.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//iget.3m_kracken.html ']'
+ echo 'append("iget.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//igets.3m_kracken.html ']'
+ echo 'append("igets.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//kracken.3m_kracken.html ']'
+ echo 'append("kracken.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//lget.3m_kracken.html ']'
+ echo 'append("lget.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//lgets.3m_kracken.html ']'
+ echo 'append("lgets.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//parse.3m_kracken.html ']'
+ echo 'append("parse.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//retrev.3m_kracken.html ']'
+ echo 'append("retrev.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//rget.3m_kracken.html ']'
+ echo 'append("rget.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//rgets.3m_kracken.html ']'
+ echo 'append("rgets.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//setprompts.3m_kracken.html ']'
+ echo 'append("setprompts.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//sget.3m_kracken.html ']'
+ echo 'append("sget.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//sgets.3m_kracken.html ']'
+ echo 'append("sgets.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//show.3m_kracken.html ']'
+ echo 'append("show.3m_kracken.html");'
+ read NAME
+ '[' -r ../../docs//store.3m_kracken.html ']'
+ echo 'append("store.3m_kracken.html");'
+ read NAME
+ echo '}'
+ exit
+ echo '>>>> make HTML index to manpages'
>>>> make HTML index to manpages
+ env MANPATH=../../man OUTDIR=../../docs GPF_manpage_index
making HTML index for section 1 in ../../docs/man1.html
FOUND 0 for section 1
making HTML index for section 2 in ../../docs/man2.html
FOUND 0 for section 2
making HTML index for section 3 in ../../docs/man3.html
FOUND 19 for section 3
<GPF_manpage_index><MANPATH>../../man
<GPF_manpage_index><NAME>ARGUMENTS<SECT>(3)<DASH>-
<GPF_manpage_index><NAME>M_kracken<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>dget<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>dgets<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>dissect<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>iget<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>igets<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>kracken<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>lget<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>lgets<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>parse<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>retrev<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>rget<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>rgets<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>setprompts<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>sget<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>sgets<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>show<SECT>(3m_kracken)<DASH>-
<GPF_manpage_index><NAME>store<SECT>(3m_kracken)<DASH>-
making HTML index for section 4 in ../../docs/man4.html
FOUND 0 for section 4
making HTML index for section 5 in ../../docs/man5.html
FOUND 0 for section 5
making HTML index for section 6 in ../../docs/man6.html
FOUND 0 for section 6
making HTML index for section 7 in ../../docs/man7.html
FOUND 0 for section 7
making HTML index for section 8 in ../../docs/man8.html
FOUND 0 for section 8
making HTML index for Fortran Intrinsics for section 3 in ../../docs/man3i.html
FOUND 0 for section 3
making HTML index for Fortran Intrinsics for section 7 in ../../docs/man7i.html
FOUND 0 for section 7
sed: can't read ../../docs/*.[37]fortran.html: No such file or directory
+ echo '>>>> spell check'
>>>> spell check
+ spell ../../README.md
+ xargs -n 8
+ column -t
FPM     Fortran  GPF        KRACKEN  altervista  cd  fortran  fpm
gif     github   html       http     https       io  kracken  lang
libGPF  toml     urbanjost  www
+ echo '>>>> update GPF project and documents'
>>>> update GPF project and documents
+ unset GITHUB
+ make.one libGPF
1294616 (process ID) old priority 0, new priority 19
W-A-R-N-I-N-G: no ccheck.c file (required for configured versions)
+ echo '>>>> run test'
>>>> run test
+ cd ../../test
+ ccall test_suite_M_kracken.f90
*ccall*: MAKING TEMPORARY DIRECTORY /tmp/CCALL_Linux_gfortran_1295008
+ mkdir -m 755 -p /tmp/CCALL_Linux_gfortran_1295008
+ chmod u=xrw,g-xrw,o-xrw /tmp/CCALL_Linux_gfortran_1295008
+ CCALL_DELETE_DIR=TRUE
+ FULLNAME=/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
+ SPLIT
+ sed -e 's/ -/@ -/g'
+ tr @ '\012'
+ cp test_suite_M_kracken.f90 /tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
+ echo NAME test_suite_M_kracken.f90
NAME test_suite_M_kracken.f90
+ echo /home/urbanjs/venus/V600/bin/Linux_gfortran/test_suite_M_kracken
/home/urbanjs/venus/V600/bin/Linux_gfortran/test_suite_M_kracken
+ ADDOPTIONS /tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
+ INPUTFILENAME=/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
+ grep
 -qi '\<use\>  *\<M_readline\>' /tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
+ grep
 -qi '\<use\>  *\<M_curl\>' /tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
+ set
 -x
+ set
 -v
+ gfortran
 -fbacktrace
 -fdump-core
 -frecord-marker=4
 -I.
 -DTESTPRG
 -DTESTPRG90 /tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
 -o /home/urbanjs/venus/V600/bin/Linux_gfortran/test_suite_M_kracken
 -Wall
 -Wextra
 -Bstatic
 -I/home/urbanjs/venus/V600/lib/Linux_gfortran
 -J/home/urbanjs/venus/V600/lib/Linux_gfortran
 -L/home/urbanjs/venus/V600/lib/Linux_gfortran
 -lkon
 -lDL
 -lMULTI
 -lrandlib
 -lrandlibf90
 -lncarsa
 -lvopl
 -lGPF
 -lGPF_C
 -lncurses
 -lcurl
 -lSTUG
 -lsqlite3
 -lquadmath
 -lm
 -Wunreachable-code
 -Wunused
 -Wuninitialized
 -g
 -O
 -fcoarray=single
 -Bdynamic
 -L/usr/lib/x86_64-linux-gnu
 -lX11
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:299:25:

  299 |  call unit_check('store',rget('MY_REAL')    == 1234.5677,            'MY_REAL',rget('MY_REAL')+bug,1234.5677)
      |                         1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:302:25:

  302 |  call unit_check('store',dget('MY_DOUBLE')  == 12345670000.000000d0, 'MY_DOUBLE',dget('MY_DOUBLE')+0,12345670000.000000d0)
      |                         1
Warning: Equality comparison for REAL(8) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:273:62:

  273 |    call unit_check('sgets', size(sgets('BLANK')).eq.0.and.len(sgets('BLANK')).eq.0,   'BLANK')
      |                                                              1
Warning: Impure function ‘sgets’ at (1) might not be evaluated [-Wfunction-elimination]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:260:55:

  260 |    call unit_check('sget', len(sget('BLANK')).ne.0.and.sget('BLANK').eq.' ', 'BLANK')
      |                                                       1
Warning: Impure function ‘sget’ at (1) might not be evaluated [-Wfunction-elimination]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:232:32:

  232 |    call unit_check('rgets', all(rgets('MY_REAL1').eq.[100.0e0,0.0e0,300.33333e2]),'MY_REAL1')
      |                                1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:233:32:

  233 |    call unit_check('rgets', all(rgets('MY_REAL2').eq.[-1234.0e-20]),              'MY_REAL2')
      |                                1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:216:27:

  216 |    call unit_check('rget', rget('MY_REAL1').eq.1234.567,    'MY_REAL1',rget('MY_REAL1')+bug)
      |                           1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:217:27:

  217 |    call unit_check('rget', rget('MY_REAL2').eq.-1234.567e3, 'MY_REAL2',rget('MY_REAL2')+bug)
      |                           1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:218:27:

  218 |    call unit_check('rget', rget('NOTTHERE').eq.0,           'NOTTHERE',rget('NOTTHERE')+bug)
      |                           1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:220:27:

  220 |    call unit_check('rget', rget('BLANK').eq.0,              'BLANK',rget('BLANK')+bug)
      |                           1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:186:33:

  186 |          call unit_check('parse',rget('end_k').eq.55.55,'end_k')
      |                                 1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:120:53:

  120 |    call unit_check('igets', size(i).eq.1.and.i(1).eq.-huge(0),         'BAD')
      |                                                     1
Warning: Change of value in conversion from ‘INTEGER(4)’ to ‘REAL(4)’ at (1) [-Wconversion]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:120:45:

  120 |    call unit_check('igets', size(i).eq.1.and.i(1).eq.-huge(0),         'BAD')
      |                                             1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:89:30:

   89 |    call unit_check('dissect', rget('demo_float').eq.50.0, 'demo_float',rget('demo_float')+bug)
      |                              1
Warning: Equality comparison for REAL(4) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:70:32:

   70 |    call unit_check('dgets', all(dgets('MY_DOUBLE1').eq.[100.0d0,0.0d0,300.33333d2]),'MY_DOUBLE1=',dget('MY_DOUBLE1')+bug)
      |                                1
Warning: Equality comparison for REAL(8) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:71:32:

   71 |    call unit_check('dgets', all(dgets('MY_DOUBLE2').eq.[-1234.0d-20]),&
      |                                1
Warning: Equality comparison for REAL(8) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:53:26:

   53 |    call unit_check('dget',dget('MY_DOUBLE2').eq.-1234.0d-20,&
      |                          1
Warning: Equality comparison for REAL(8) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:55:26:

   55 |    call unit_check('dget',dget('NOTTHERE').eq.0,             'NOTTHERE',dget('NOTTHERE')+bug)
      |                          1
Warning: Equality comparison for REAL(8) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:57:26:

   57 |    call unit_check('dget',dget('BLANK').eq.0,                'BLANK',dget('BLANK'))
      |                          1
Warning: Equality comparison for REAL(8) at (1) [-Wcompare-reals]
/tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90:14:23:

   14 | integer,parameter :: HT=9
      |                       1
Warning: Unused parameter ‘ht’ declared at (1) [-Wunused-parameter]
/usr/bin/ld: /home/urbanjs/venus/V600/lib/Linux_gfortran/libGPF.a(M_args.o): in function `splitit.0':
/tmp/USH.1956197/M_args.f90:1737: undefined reference to `__m_strings_MOD_upper'
/usr/bin/ld: /home/urbanjs/venus/V600/lib/Linux_gfortran/libGPF.a(M_args.o): in function `ifnull.1':
/tmp/USH.1956197/M_args.f90:1389: undefined reference to `__m_strings_MOD_upper'
/usr/bin/ld: /tmp/USH.1956197/M_args.f90:1389: undefined reference to `__m_strings_MOD_upper'
/usr/bin/ld: /home/urbanjs/venus/V600/lib/Linux_gfortran/libGPF.a(M_args.o): in function `__m_args_MOD_namelist_to_dictionary':
/tmp/USH.1956197/M_args.f90:1668: undefined reference to `__m_strings_MOD_upper'
/usr/bin/ld: /home/urbanjs/venus/V600/lib/Linux_gfortran/libGPF.a(M_args.o): in function `__m_args_MOD_prototype_and_cmd_args_to_nlist':
/tmp/USH.1956197/M_args.f90:1372: undefined reference to `__m_strings_MOD_upper'
/usr/bin/ld: /home/urbanjs/venus/V600/lib/Linux_gfortran/libGPF.a(M_args.o):/tmp/USH.1956197/M_args.f90:1372: more undefined references to `__m_strings_MOD_upper' follow
collect2: error: ld returned 1 exit status
+ ar rv /home/urbanjs/venus/V600/lib/Linux_gfortran/PROGRAM.a /tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
a - /tmp/CCALL_Linux_gfortran_1295008/test_suite_M_kracken.1295008.f90
+ set +x
/home/urbanjs/venus/V600/LIBRARY/CYGWIN/scripts_regression/goodbad: test_suite_M_kracken.1 0 test_suite_M_kracken start --section 1
*ccall*: REMOVING /tmp/CCALL_Linux_gfortran_1295008
+ test_suite_M_kracken
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_build_module: line 198: test_suite_M_kracken: command not found
+ echo '>>>> GPF_fman'
>>>> GPF_fman
+ '[' -d doc/ ']'
+ GPF_fman m_kracken doc
+++ dirname /home/urbanjs/venus/V600/github/github_scripts/bash/GPF_fman
++ realpath /home/urbanjs/venus/V600/github/github_scripts/bash
+ HERE=/home/urbanjs/venus/V600/github/github_scripts/bash
++ dirname /home/urbanjs/venus/V600/github/github_scripts/bash
+ BASE=/home/urbanjs/venus/V600/github/github_scripts
++ dirname /home/urbanjs/venus/V600/github/github_scripts
+ BASE=/home/urbanjs/venus/V600/github
+ DOCS=/home/urbanjs/venus/V600/github/docs
+ export PACKAGE=m_kracken
+ PACKAGE=m_kracken
+ export TEXTDIR=doc
+ TEXTDIR=doc
+ export NAME
+ cd doc
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_fman: line 400: /home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/src/m_kracken_docs.f90: No such file or directory
+ ls -ld /home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/src/m_kracken_docs.f90
ls: cannot access '/home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/src/m_kracken_docs.f90': No such file or directory
+ cat
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_fman: line 406: /home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/app/fpm-m_kracken.f90: No such file or directory
